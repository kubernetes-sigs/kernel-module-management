// Code generated by MockGen. DO NOT EDIT.
// Source: statusupdater.go
//
// Generated by this command:
//
//	mockgen -source=statusupdater.go -package=statusupdater -destination=mock_statusupdater.go
//
// Package statusupdater is a generated GoMock package.
package statusupdater

import (
	context "context"
	reflect "reflect"

	v1beta1 "github.com/kubernetes-sigs/kernel-module-management/api-hub/v1beta1"
	v1beta10 "github.com/kubernetes-sigs/kernel-module-management/api/v1beta1"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/apps/v1"
	v10 "k8s.io/api/core/v1"
	v11 "open-cluster-management.io/api/work/v1"
)

// MockModuleStatusUpdater is a mock of ModuleStatusUpdater interface.
type MockModuleStatusUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockModuleStatusUpdaterMockRecorder
}

// MockModuleStatusUpdaterMockRecorder is the mock recorder for MockModuleStatusUpdater.
type MockModuleStatusUpdaterMockRecorder struct {
	mock *MockModuleStatusUpdater
}

// NewMockModuleStatusUpdater creates a new mock instance.
func NewMockModuleStatusUpdater(ctrl *gomock.Controller) *MockModuleStatusUpdater {
	mock := &MockModuleStatusUpdater{ctrl: ctrl}
	mock.recorder = &MockModuleStatusUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModuleStatusUpdater) EXPECT() *MockModuleStatusUpdaterMockRecorder {
	return m.recorder
}

// ModuleUpdateStatus mocks base method.
func (m *MockModuleStatusUpdater) ModuleUpdateStatus(ctx context.Context, mod *v1beta10.Module, kernelMappingNodes, targetedNodes []v10.Node, existingDS []v1.DaemonSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModuleUpdateStatus", ctx, mod, kernelMappingNodes, targetedNodes, existingDS)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModuleUpdateStatus indicates an expected call of ModuleUpdateStatus.
func (mr *MockModuleStatusUpdaterMockRecorder) ModuleUpdateStatus(ctx, mod, kernelMappingNodes, targetedNodes, existingDS any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModuleUpdateStatus", reflect.TypeOf((*MockModuleStatusUpdater)(nil).ModuleUpdateStatus), ctx, mod, kernelMappingNodes, targetedNodes, existingDS)
}

// MockManagedClusterModuleStatusUpdater is a mock of ManagedClusterModuleStatusUpdater interface.
type MockManagedClusterModuleStatusUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockManagedClusterModuleStatusUpdaterMockRecorder
}

// MockManagedClusterModuleStatusUpdaterMockRecorder is the mock recorder for MockManagedClusterModuleStatusUpdater.
type MockManagedClusterModuleStatusUpdaterMockRecorder struct {
	mock *MockManagedClusterModuleStatusUpdater
}

// NewMockManagedClusterModuleStatusUpdater creates a new mock instance.
func NewMockManagedClusterModuleStatusUpdater(ctrl *gomock.Controller) *MockManagedClusterModuleStatusUpdater {
	mock := &MockManagedClusterModuleStatusUpdater{ctrl: ctrl}
	mock.recorder = &MockManagedClusterModuleStatusUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagedClusterModuleStatusUpdater) EXPECT() *MockManagedClusterModuleStatusUpdaterMockRecorder {
	return m.recorder
}

// ManagedClusterModuleUpdateStatus mocks base method.
func (m *MockManagedClusterModuleStatusUpdater) ManagedClusterModuleUpdateStatus(ctx context.Context, mcm *v1beta1.ManagedClusterModule, ownedManifestWorks []v11.ManifestWork) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManagedClusterModuleUpdateStatus", ctx, mcm, ownedManifestWorks)
	ret0, _ := ret[0].(error)
	return ret0
}

// ManagedClusterModuleUpdateStatus indicates an expected call of ManagedClusterModuleUpdateStatus.
func (mr *MockManagedClusterModuleStatusUpdaterMockRecorder) ManagedClusterModuleUpdateStatus(ctx, mcm, ownedManifestWorks any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManagedClusterModuleUpdateStatus", reflect.TypeOf((*MockManagedClusterModuleStatusUpdater)(nil).ManagedClusterModuleUpdateStatus), ctx, mcm, ownedManifestWorks)
}
