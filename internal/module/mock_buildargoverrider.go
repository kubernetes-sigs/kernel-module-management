// Code generated by MockGen. DO NOT EDIT.
// Source: buildargoverrider.go
//
// Generated by this command:
//
//	mockgen -source=buildargoverrider.go -package=module -destination=mock_buildargoverrider.go
//
// Package module is a generated GoMock package.
package module

import (
	reflect "reflect"

	v1beta1 "github.com/kubernetes-sigs/kernel-module-management/api/v1beta1"
	gomock "go.uber.org/mock/gomock"
)

// MockBuildArgOverrider is a mock of BuildArgOverrider interface.
type MockBuildArgOverrider struct {
	ctrl     *gomock.Controller
	recorder *MockBuildArgOverriderMockRecorder
}

// MockBuildArgOverriderMockRecorder is the mock recorder for MockBuildArgOverrider.
type MockBuildArgOverriderMockRecorder struct {
	mock *MockBuildArgOverrider
}

// NewMockBuildArgOverrider creates a new mock instance.
func NewMockBuildArgOverrider(ctrl *gomock.Controller) *MockBuildArgOverrider {
	mock := &MockBuildArgOverrider{ctrl: ctrl}
	mock.recorder = &MockBuildArgOverriderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildArgOverrider) EXPECT() *MockBuildArgOverriderMockRecorder {
	return m.recorder
}

// ApplyBuildArgOverrides mocks base method.
func (m *MockBuildArgOverrider) ApplyBuildArgOverrides(args []v1beta1.BuildArg, overrides ...v1beta1.BuildArg) []v1beta1.BuildArg {
	m.ctrl.T.Helper()
	varargs := []any{args}
	for _, a := range overrides {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplyBuildArgOverrides", varargs...)
	ret0, _ := ret[0].([]v1beta1.BuildArg)
	return ret0
}

// ApplyBuildArgOverrides indicates an expected call of ApplyBuildArgOverrides.
func (mr *MockBuildArgOverriderMockRecorder) ApplyBuildArgOverrides(args any, overrides ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{args}, overrides...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyBuildArgOverrides", reflect.TypeOf((*MockBuildArgOverrider)(nil).ApplyBuildArgOverrides), varargs...)
}

// FormatBuildArgs mocks base method.
func (m *MockBuildArgOverrider) FormatBuildArgs(buildArgs []v1beta1.BuildArg) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatBuildArgs", buildArgs)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatBuildArgs indicates an expected call of FormatBuildArgs.
func (mr *MockBuildArgOverriderMockRecorder) FormatBuildArgs(buildArgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatBuildArgs", reflect.TypeOf((*MockBuildArgOverrider)(nil).FormatBuildArgs), buildArgs)
}
