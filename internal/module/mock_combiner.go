// Code generated by MockGen. DO NOT EDIT.
// Source: combiner.go
//
// Generated by this command:
//
//	mockgen -source=combiner.go -package=module -destination=mock_combiner.go
//
// Package module is a generated GoMock package.
package module

import (
	reflect "reflect"

	v1beta1 "github.com/kubernetes-sigs/kernel-module-management/api/v1beta1"
	gomock "go.uber.org/mock/gomock"
)

// MockCombiner is a mock of Combiner interface.
type MockCombiner struct {
	ctrl     *gomock.Controller
	recorder *MockCombinerMockRecorder
}

// MockCombinerMockRecorder is the mock recorder for MockCombiner.
type MockCombinerMockRecorder struct {
	mock *MockCombiner
}

// NewMockCombiner creates a new mock instance.
func NewMockCombiner(ctrl *gomock.Controller) *MockCombiner {
	mock := &MockCombiner{ctrl: ctrl}
	mock.recorder = &MockCombinerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCombiner) EXPECT() *MockCombinerMockRecorder {
	return m.recorder
}

// ApplyBuildArgOverrides mocks base method.
func (m *MockCombiner) ApplyBuildArgOverrides(args []v1beta1.BuildArg, overrides ...v1beta1.BuildArg) []v1beta1.BuildArg {
	m.ctrl.T.Helper()
	varargs := []any{args}
	for _, a := range overrides {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ApplyBuildArgOverrides", varargs...)
	ret0, _ := ret[0].([]v1beta1.BuildArg)
	return ret0
}

// ApplyBuildArgOverrides indicates an expected call of ApplyBuildArgOverrides.
func (mr *MockCombinerMockRecorder) ApplyBuildArgOverrides(args any, overrides ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{args}, overrides...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyBuildArgOverrides", reflect.TypeOf((*MockCombiner)(nil).ApplyBuildArgOverrides), varargs...)
}

// GetRelevantBuild mocks base method.
func (m *MockCombiner) GetRelevantBuild(moduleBuild, mappingBuild *v1beta1.Build) *v1beta1.Build {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelevantBuild", moduleBuild, mappingBuild)
	ret0, _ := ret[0].(*v1beta1.Build)
	return ret0
}

// GetRelevantBuild indicates an expected call of GetRelevantBuild.
func (mr *MockCombinerMockRecorder) GetRelevantBuild(moduleBuild, mappingBuild any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelevantBuild", reflect.TypeOf((*MockCombiner)(nil).GetRelevantBuild), moduleBuild, mappingBuild)
}

// GetRelevantSign mocks base method.
func (m *MockCombiner) GetRelevantSign(moduleSign, mappingSign *v1beta1.Sign, kernel string) (*v1beta1.Sign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelevantSign", moduleSign, mappingSign, kernel)
	ret0, _ := ret[0].(*v1beta1.Sign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelevantSign indicates an expected call of GetRelevantSign.
func (mr *MockCombinerMockRecorder) GetRelevantSign(moduleSign, mappingSign, kernel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelevantSign", reflect.TypeOf((*MockCombiner)(nil).GetRelevantSign), moduleSign, mappingSign, kernel)
}
