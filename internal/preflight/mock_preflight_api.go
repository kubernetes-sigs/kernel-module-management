// Code generated by MockGen. DO NOT EDIT.
// Source: preflight.go
//
// Generated by this command:
//
//	mockgen -source=preflight.go -package=preflight -destination=mock_preflight_api.go PreflightAPI, preflightHelperAPI
//
// Package preflight is a generated GoMock package.
package preflight

import (
	context "context"
	reflect "reflect"

	v1beta1 "github.com/kubernetes-sigs/kernel-module-management/api/v1beta1"
	api "github.com/kubernetes-sigs/kernel-module-management/internal/api"
	gomock "go.uber.org/mock/gomock"
)

// MockPreflightAPI is a mock of PreflightAPI interface.
type MockPreflightAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPreflightAPIMockRecorder
}

// MockPreflightAPIMockRecorder is the mock recorder for MockPreflightAPI.
type MockPreflightAPIMockRecorder struct {
	mock *MockPreflightAPI
}

// NewMockPreflightAPI creates a new mock instance.
func NewMockPreflightAPI(ctrl *gomock.Controller) *MockPreflightAPI {
	mock := &MockPreflightAPI{ctrl: ctrl}
	mock.recorder = &MockPreflightAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPreflightAPI) EXPECT() *MockPreflightAPIMockRecorder {
	return m.recorder
}

// PreflightUpgradeCheck mocks base method.
func (m *MockPreflightAPI) PreflightUpgradeCheck(ctx context.Context, pv *v1beta1.PreflightValidation, mod *v1beta1.Module) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreflightUpgradeCheck", ctx, pv, mod)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// PreflightUpgradeCheck indicates an expected call of PreflightUpgradeCheck.
func (mr *MockPreflightAPIMockRecorder) PreflightUpgradeCheck(ctx, pv, mod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreflightUpgradeCheck", reflect.TypeOf((*MockPreflightAPI)(nil).PreflightUpgradeCheck), ctx, pv, mod)
}

// MockpreflightHelperAPI is a mock of preflightHelperAPI interface.
type MockpreflightHelperAPI struct {
	ctrl     *gomock.Controller
	recorder *MockpreflightHelperAPIMockRecorder
}

// MockpreflightHelperAPIMockRecorder is the mock recorder for MockpreflightHelperAPI.
type MockpreflightHelperAPIMockRecorder struct {
	mock *MockpreflightHelperAPI
}

// NewMockpreflightHelperAPI creates a new mock instance.
func NewMockpreflightHelperAPI(ctrl *gomock.Controller) *MockpreflightHelperAPI {
	mock := &MockpreflightHelperAPI{ctrl: ctrl}
	mock.recorder = &MockpreflightHelperAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpreflightHelperAPI) EXPECT() *MockpreflightHelperAPIMockRecorder {
	return m.recorder
}

// verifyBuild mocks base method.
func (m *MockpreflightHelperAPI) verifyBuild(ctx context.Context, pv *v1beta1.PreflightValidation, mld *api.ModuleLoaderData) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "verifyBuild", ctx, pv, mld)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// verifyBuild indicates an expected call of verifyBuild.
func (mr *MockpreflightHelperAPIMockRecorder) verifyBuild(ctx, pv, mld any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "verifyBuild", reflect.TypeOf((*MockpreflightHelperAPI)(nil).verifyBuild), ctx, pv, mld)
}

// verifyImage mocks base method.
func (m *MockpreflightHelperAPI) verifyImage(ctx context.Context, mld *api.ModuleLoaderData) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "verifyImage", ctx, mld)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// verifyImage indicates an expected call of verifyImage.
func (mr *MockpreflightHelperAPIMockRecorder) verifyImage(ctx, mld any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "verifyImage", reflect.TypeOf((*MockpreflightHelperAPI)(nil).verifyImage), ctx, mld)
}

// verifySign mocks base method.
func (m *MockpreflightHelperAPI) verifySign(ctx context.Context, pv *v1beta1.PreflightValidation, mld *api.ModuleLoaderData) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "verifySign", ctx, pv, mld)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// verifySign indicates an expected call of verifySign.
func (mr *MockpreflightHelperAPIMockRecorder) verifySign(ctx, pv, mld any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "verifySign", reflect.TypeOf((*MockpreflightHelperAPI)(nil).verifySign), ctx, pv, mld)
}
