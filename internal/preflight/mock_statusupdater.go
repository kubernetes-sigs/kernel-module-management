// Code generated by MockGen. DO NOT EDIT.
// Source: statusupdater.go
//
// Generated by this command:
//
//	mockgen -source=statusupdater.go -package=preflight -destination=mock_statusupdater.go
//
// Package preflight is a generated GoMock package.
package preflight

import (
	context "context"
	reflect "reflect"

	v1beta2 "github.com/kubernetes-sigs/kernel-module-management/api/v1beta2"
	gomock "go.uber.org/mock/gomock"
	types "k8s.io/apimachinery/pkg/types"
	sets "k8s.io/apimachinery/pkg/util/sets"
)

// MockStatusUpdater is a mock of StatusUpdater interface.
type MockStatusUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockStatusUpdaterMockRecorder
}

// MockStatusUpdaterMockRecorder is the mock recorder for MockStatusUpdater.
type MockStatusUpdaterMockRecorder struct {
	mock *MockStatusUpdater
}

// NewMockStatusUpdater creates a new mock instance.
func NewMockStatusUpdater(ctrl *gomock.Controller) *MockStatusUpdater {
	mock := &MockStatusUpdater{ctrl: ctrl}
	mock.recorder = &MockStatusUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusUpdater) EXPECT() *MockStatusUpdaterMockRecorder {
	return m.recorder
}

// PresetStatuses mocks base method.
func (m *MockStatusUpdater) PresetStatuses(ctx context.Context, pv *v1beta2.PreflightValidation, existingModules sets.Set[types.NamespacedName], newModules []types.NamespacedName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresetStatuses", ctx, pv, existingModules, newModules)
	ret0, _ := ret[0].(error)
	return ret0
}

// PresetStatuses indicates an expected call of PresetStatuses.
func (mr *MockStatusUpdaterMockRecorder) PresetStatuses(ctx, pv, existingModules, newModules any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresetStatuses", reflect.TypeOf((*MockStatusUpdater)(nil).PresetStatuses), ctx, pv, existingModules, newModules)
}

// SetVerificationStage mocks base method.
func (m *MockStatusUpdater) SetVerificationStage(ctx context.Context, preflight *v1beta2.PreflightValidation, moduleName types.NamespacedName, stage string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVerificationStage", ctx, preflight, moduleName, stage)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVerificationStage indicates an expected call of SetVerificationStage.
func (mr *MockStatusUpdaterMockRecorder) SetVerificationStage(ctx, preflight, moduleName, stage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVerificationStage", reflect.TypeOf((*MockStatusUpdater)(nil).SetVerificationStage), ctx, preflight, moduleName, stage)
}

// SetVerificationStatus mocks base method.
func (m *MockStatusUpdater) SetVerificationStatus(ctx context.Context, preflight *v1beta2.PreflightValidation, moduleName types.NamespacedName, verificationStatus, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVerificationStatus", ctx, preflight, moduleName, verificationStatus, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVerificationStatus indicates an expected call of SetVerificationStatus.
func (mr *MockStatusUpdaterMockRecorder) SetVerificationStatus(ctx, preflight, moduleName, verificationStatus, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVerificationStatus", reflect.TypeOf((*MockStatusUpdater)(nil).SetVerificationStatus), ctx, preflight, moduleName, verificationStatus, message)
}
