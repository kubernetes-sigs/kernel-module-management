// Code generated by MockGen. DO NOT EDIT.
// Source: preflight.go
//
// Generated by this command:
//
//	mockgen -source=preflight.go -package=preflight -destination=mock_preflight.go
//
// Package preflight is a generated GoMock package.
package preflight

import (
	reflect "reflect"

	v1beta2 "github.com/kubernetes-sigs/kernel-module-management/api/v1beta2"
	gomock "go.uber.org/mock/gomock"
)

// MockPreflightAPI is a mock of PreflightAPI interface.
type MockPreflightAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPreflightAPIMockRecorder
}

// MockPreflightAPIMockRecorder is the mock recorder for MockPreflightAPI.
type MockPreflightAPIMockRecorder struct {
	mock *MockPreflightAPI
}

// NewMockPreflightAPI creates a new mock instance.
func NewMockPreflightAPI(ctrl *gomock.Controller) *MockPreflightAPI {
	mock := &MockPreflightAPI{ctrl: ctrl}
	mock.recorder = &MockPreflightAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPreflightAPI) EXPECT() *MockPreflightAPIMockRecorder {
	return m.recorder
}

// AllModulesVerified mocks base method.
func (m *MockPreflightAPI) AllModulesVerified(pv *v1beta2.PreflightValidation) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllModulesVerified", pv)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllModulesVerified indicates an expected call of AllModulesVerified.
func (mr *MockPreflightAPIMockRecorder) AllModulesVerified(pv any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllModulesVerified", reflect.TypeOf((*MockPreflightAPI)(nil).AllModulesVerified), pv)
}

// GetModuleStatus mocks base method.
func (m *MockPreflightAPI) GetModuleStatus(pv *v1beta2.PreflightValidation, namespace, name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleStatus", pv, namespace, name)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetModuleStatus indicates an expected call of GetModuleStatus.
func (mr *MockPreflightAPIMockRecorder) GetModuleStatus(pv, namespace, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleStatus", reflect.TypeOf((*MockPreflightAPI)(nil).GetModuleStatus), pv, namespace, name)
}

// SetModuleStatus mocks base method.
func (m *MockPreflightAPI) SetModuleStatus(pv *v1beta2.PreflightValidation, namespace, name, status, reason string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetModuleStatus", pv, namespace, name, status, reason)
}

// SetModuleStatus indicates an expected call of SetModuleStatus.
func (mr *MockPreflightAPIMockRecorder) SetModuleStatus(pv, namespace, name, status, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModuleStatus", reflect.TypeOf((*MockPreflightAPI)(nil).SetModuleStatus), pv, namespace, name, status, reason)
}
