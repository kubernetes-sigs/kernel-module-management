// Code generated by MockGen. DO NOT EDIT.
// Source: remoteimagemounter.go
//
// Generated by this command:
//
//	mockgen -source=remoteimagemounter.go -package=worker -destination=mock_remoteimagemounter.go ociImageMounterHelperAPI
//
// Package worker is a generated GoMock package.
package worker

import (
	reflect "reflect"

	v1 "github.com/google/go-containerregistry/pkg/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockociImageMounterHelperAPI is a mock of ociImageMounterHelperAPI interface.
type MockociImageMounterHelperAPI struct {
	ctrl     *gomock.Controller
	recorder *MockociImageMounterHelperAPIMockRecorder
}

// MockociImageMounterHelperAPIMockRecorder is the mock recorder for MockociImageMounterHelperAPI.
type MockociImageMounterHelperAPIMockRecorder struct {
	mock *MockociImageMounterHelperAPI
}

// NewMockociImageMounterHelperAPI creates a new mock instance.
func NewMockociImageMounterHelperAPI(ctrl *gomock.Controller) *MockociImageMounterHelperAPI {
	mock := &MockociImageMounterHelperAPI{ctrl: ctrl}
	mock.recorder = &MockociImageMounterHelperAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockociImageMounterHelperAPI) EXPECT() *MockociImageMounterHelperAPIMockRecorder {
	return m.recorder
}

// mountOCIImage mocks base method.
func (m *MockociImageMounterHelperAPI) mountOCIImage(image v1.Image, dstDirFS string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "mountOCIImage", image, dstDirFS)
	ret0, _ := ret[0].(error)
	return ret0
}

// mountOCIImage indicates an expected call of mountOCIImage.
func (mr *MockociImageMounterHelperAPIMockRecorder) mountOCIImage(image, dstDirFS any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mountOCIImage", reflect.TypeOf((*MockociImageMounterHelperAPI)(nil).mountOCIImage), image, dstDirFS)
}
