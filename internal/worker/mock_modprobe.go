// Code generated by MockGen. DO NOT EDIT.
// Source: modprobe.go
//
// Generated by this command:
//
//	mockgen -source=modprobe.go -package=worker -destination=mock_modprobe.go
//
// Package worker is a generated GoMock package.
package worker

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockModprobeRunner is a mock of ModprobeRunner interface.
type MockModprobeRunner struct {
	ctrl     *gomock.Controller
	recorder *MockModprobeRunnerMockRecorder
}

// MockModprobeRunnerMockRecorder is the mock recorder for MockModprobeRunner.
type MockModprobeRunnerMockRecorder struct {
	mock *MockModprobeRunner
}

// NewMockModprobeRunner creates a new mock instance.
func NewMockModprobeRunner(ctrl *gomock.Controller) *MockModprobeRunner {
	mock := &MockModprobeRunner{ctrl: ctrl}
	mock.recorder = &MockModprobeRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModprobeRunner) EXPECT() *MockModprobeRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockModprobeRunner) Run(ctx context.Context, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockModprobeRunnerMockRecorder) Run(ctx any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockModprobeRunner)(nil).Run), varargs...)
}
