// Code generated by MockGen. DO NOT EDIT.
// Source: mbsc_reconciler.go
//
// Generated by this command:
//
//	mockgen -source=mbsc_reconciler.go -package=controllers -destination=mock_mbsc_reconciler.go mbscReconcilerHelperAPI
//
// Package controllers is a generated GoMock package.
package controllers

import (
	context "context"
	reflect "reflect"

	v1beta1 "github.com/kubernetes-sigs/kernel-module-management/api/v1beta1"
	gomock "go.uber.org/mock/gomock"
)

// MockmbscReconcilerHelperAPI is a mock of mbscReconcilerHelperAPI interface.
type MockmbscReconcilerHelperAPI struct {
	ctrl     *gomock.Controller
	recorder *MockmbscReconcilerHelperAPIMockRecorder
}

// MockmbscReconcilerHelperAPIMockRecorder is the mock recorder for MockmbscReconcilerHelperAPI.
type MockmbscReconcilerHelperAPIMockRecorder struct {
	mock *MockmbscReconcilerHelperAPI
}

// NewMockmbscReconcilerHelperAPI creates a new mock instance.
func NewMockmbscReconcilerHelperAPI(ctrl *gomock.Controller) *MockmbscReconcilerHelperAPI {
	mock := &MockmbscReconcilerHelperAPI{ctrl: ctrl}
	mock.recorder = &MockmbscReconcilerHelperAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmbscReconcilerHelperAPI) EXPECT() *MockmbscReconcilerHelperAPIMockRecorder {
	return m.recorder
}

// garbageCollect mocks base method.
func (m *MockmbscReconcilerHelperAPI) garbageCollect(ctx context.Context, mbscObj *v1beta1.ModuleBuildSignConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "garbageCollect", ctx, mbscObj)
	ret0, _ := ret[0].(error)
	return ret0
}

// garbageCollect indicates an expected call of garbageCollect.
func (mr *MockmbscReconcilerHelperAPIMockRecorder) garbageCollect(ctx, mbscObj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "garbageCollect", reflect.TypeOf((*MockmbscReconcilerHelperAPI)(nil).garbageCollect), ctx, mbscObj)
}

// processImagesSpecs mocks base method.
func (m *MockmbscReconcilerHelperAPI) processImagesSpecs(ctx context.Context, mbscObj *v1beta1.ModuleBuildSignConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "processImagesSpecs", ctx, mbscObj)
	ret0, _ := ret[0].(error)
	return ret0
}

// processImagesSpecs indicates an expected call of processImagesSpecs.
func (mr *MockmbscReconcilerHelperAPIMockRecorder) processImagesSpecs(ctx, mbscObj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "processImagesSpecs", reflect.TypeOf((*MockmbscReconcilerHelperAPI)(nil).processImagesSpecs), ctx, mbscObj)
}

// updateStatus mocks base method.
func (m *MockmbscReconcilerHelperAPI) updateStatus(ctx context.Context, mbscObj *v1beta1.ModuleBuildSignConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateStatus", ctx, mbscObj)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateStatus indicates an expected call of updateStatus.
func (mr *MockmbscReconcilerHelperAPIMockRecorder) updateStatus(ctx, mbscObj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateStatus", reflect.TypeOf((*MockmbscReconcilerHelperAPI)(nil).updateStatus), ctx, mbscObj)
}
