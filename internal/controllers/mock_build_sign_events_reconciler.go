// Code generated by MockGen. DO NOT EDIT.
// Source: build_sign_events_reconciler.go
//
// Generated by this command:
//
//	mockgen -source=build_sign_events_reconciler.go -package=controllers -destination=mock_build_sign_events_reconciler.go JobEventReconcilerHelper
//
// Package controllers is a generated GoMock package.
package controllers

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockJobEventReconcilerHelper is a mock of JobEventReconcilerHelper interface.
type MockJobEventReconcilerHelper struct {
	ctrl     *gomock.Controller
	recorder *MockJobEventReconcilerHelperMockRecorder
}

// MockJobEventReconcilerHelperMockRecorder is the mock recorder for MockJobEventReconcilerHelper.
type MockJobEventReconcilerHelperMockRecorder struct {
	mock *MockJobEventReconcilerHelper
}

// NewMockJobEventReconcilerHelper creates a new mock instance.
func NewMockJobEventReconcilerHelper(ctrl *gomock.Controller) *MockJobEventReconcilerHelper {
	mock := &MockJobEventReconcilerHelper{ctrl: ctrl}
	mock.recorder = &MockJobEventReconcilerHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobEventReconcilerHelper) EXPECT() *MockJobEventReconcilerHelperMockRecorder {
	return m.recorder
}

// GetOwner mocks base method.
func (m *MockJobEventReconcilerHelper) GetOwner(arg0 context.Context, arg1 v1.OwnerReference, arg2 string) (client.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwner", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwner indicates an expected call of GetOwner.
func (mr *MockJobEventReconcilerHelperMockRecorder) GetOwner(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwner", reflect.TypeOf((*MockJobEventReconcilerHelper)(nil).GetOwner), arg0, arg1, arg2)
}
