// Code generated by MockGen. DO NOT EDIT.
// Source: managedclustermodule_reconciler.go
//
// Generated by this command:
//
//	mockgen -source=managedclustermodule_reconciler.go -package=hub -destination=mock_managedclustermodule_reconciler.go managedClusterModuleReconcilerHelperAPI
//
// Package hub is a generated GoMock package.
package hub

import (
	context "context"
	reflect "reflect"

	v1beta1 "github.com/kubernetes-sigs/kernel-module-management/api-hub/v1beta1"
	gomock "go.uber.org/mock/gomock"
)

// MockmanagedClusterModuleReconcilerHelperAPI is a mock of managedClusterModuleReconcilerHelperAPI interface.
type MockmanagedClusterModuleReconcilerHelperAPI struct {
	ctrl     *gomock.Controller
	recorder *MockmanagedClusterModuleReconcilerHelperAPIMockRecorder
}

// MockmanagedClusterModuleReconcilerHelperAPIMockRecorder is the mock recorder for MockmanagedClusterModuleReconcilerHelperAPI.
type MockmanagedClusterModuleReconcilerHelperAPIMockRecorder struct {
	mock *MockmanagedClusterModuleReconcilerHelperAPI
}

// NewMockmanagedClusterModuleReconcilerHelperAPI creates a new mock instance.
func NewMockmanagedClusterModuleReconcilerHelperAPI(ctrl *gomock.Controller) *MockmanagedClusterModuleReconcilerHelperAPI {
	mock := &MockmanagedClusterModuleReconcilerHelperAPI{ctrl: ctrl}
	mock.recorder = &MockmanagedClusterModuleReconcilerHelperAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmanagedClusterModuleReconcilerHelperAPI) EXPECT() *MockmanagedClusterModuleReconcilerHelperAPIMockRecorder {
	return m.recorder
}

// areImagesReady mocks base method.
func (m *MockmanagedClusterModuleReconcilerHelperAPI) areImagesReady(ctx context.Context, mcmName, clusterName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "areImagesReady", ctx, mcmName, clusterName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// areImagesReady indicates an expected call of areImagesReady.
func (mr *MockmanagedClusterModuleReconcilerHelperAPIMockRecorder) areImagesReady(ctx, mcmName, clusterName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "areImagesReady", reflect.TypeOf((*MockmanagedClusterModuleReconcilerHelperAPI)(nil).areImagesReady), ctx, mcmName, clusterName)
}

// setMicAsDesired mocks base method.
func (m *MockmanagedClusterModuleReconcilerHelperAPI) setMicAsDesired(ctx context.Context, mcm *v1beta1.ManagedClusterModule, clusterName string, kernelVersions []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setMicAsDesired", ctx, mcm, clusterName, kernelVersions)
	ret0, _ := ret[0].(error)
	return ret0
}

// setMicAsDesired indicates an expected call of setMicAsDesired.
func (mr *MockmanagedClusterModuleReconcilerHelperAPIMockRecorder) setMicAsDesired(ctx, mcm, clusterName, kernelVersions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setMicAsDesired", reflect.TypeOf((*MockmanagedClusterModuleReconcilerHelperAPI)(nil).setMicAsDesired), ctx, mcm, clusterName, kernelVersions)
}
