// Code generated by MockGen. DO NOT EDIT.
// Source: preflightvalidation_reconciler.go
//
// Generated by this command:
//
//	mockgen -source=preflightvalidation_reconciler.go -package=controllers -destination=mock_preflightvalidation_reconciler.go preflightReconcilerHelper
//
// Package controllers is a generated GoMock package.
package controllers

import (
	context "context"
	reflect "reflect"

	v1beta2 "github.com/kubernetes-sigs/kernel-module-management/api/v1beta2"
	api "github.com/kubernetes-sigs/kernel-module-management/internal/api"
	gomock "go.uber.org/mock/gomock"
	types "k8s.io/apimachinery/pkg/types"
	controllerutil "sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
)

// MockpreflightReconcilerHelper is a mock of preflightReconcilerHelper interface.
type MockpreflightReconcilerHelper struct {
	ctrl     *gomock.Controller
	recorder *MockpreflightReconcilerHelperMockRecorder
}

// MockpreflightReconcilerHelperMockRecorder is the mock recorder for MockpreflightReconcilerHelper.
type MockpreflightReconcilerHelperMockRecorder struct {
	mock *MockpreflightReconcilerHelper
}

// NewMockpreflightReconcilerHelper creates a new mock instance.
func NewMockpreflightReconcilerHelper(ctrl *gomock.Controller) *MockpreflightReconcilerHelper {
	mock := &MockpreflightReconcilerHelper{ctrl: ctrl}
	mock.recorder = &MockpreflightReconcilerHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpreflightReconcilerHelper) EXPECT() *MockpreflightReconcilerHelperMockRecorder {
	return m.recorder
}

// getModulesData mocks base method.
func (m *MockpreflightReconcilerHelper) getModulesData(ctx context.Context, pv *v1beta2.PreflightValidation) ([]*api.ModuleLoaderData, []types.NamespacedName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getModulesData", ctx, pv)
	ret0, _ := ret[0].([]*api.ModuleLoaderData)
	ret1, _ := ret[1].([]types.NamespacedName)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// getModulesData indicates an expected call of getModulesData.
func (mr *MockpreflightReconcilerHelperMockRecorder) getModulesData(ctx, pv any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getModulesData", reflect.TypeOf((*MockpreflightReconcilerHelper)(nil).getModulesData), ctx, pv)
}

// processPreflightValidation mocks base method.
func (m *MockpreflightReconcilerHelper) processPreflightValidation(ctx context.Context, modsWithMapping []*api.ModuleLoaderData, pv *v1beta2.PreflightValidation) (controllerutil.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "processPreflightValidation", ctx, modsWithMapping, pv)
	ret0, _ := ret[0].(controllerutil.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// processPreflightValidation indicates an expected call of processPreflightValidation.
func (mr *MockpreflightReconcilerHelperMockRecorder) processPreflightValidation(ctx, modsWithMapping, pv any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "processPreflightValidation", reflect.TypeOf((*MockpreflightReconcilerHelper)(nil).processPreflightValidation), ctx, modsWithMapping, pv)
}

// updateStatus mocks base method.
func (m *MockpreflightReconcilerHelper) updateStatus(ctx context.Context, modsWithMapping []*api.ModuleLoaderData, modsWithoutMapping []types.NamespacedName, pv *v1beta2.PreflightValidation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateStatus", ctx, modsWithMapping, modsWithoutMapping, pv)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateStatus indicates an expected call of updateStatus.
func (mr *MockpreflightReconcilerHelperMockRecorder) updateStatus(ctx, modsWithMapping, modsWithoutMapping, pv any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateStatus", reflect.TypeOf((*MockpreflightReconcilerHelper)(nil).updateStatus), ctx, modsWithMapping, modsWithoutMapping, pv)
}
