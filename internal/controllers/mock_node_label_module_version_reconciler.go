// Code generated by MockGen. DO NOT EDIT.
// Source: node_label_module_version_reconciler.go
//
// Generated by this command:
//
//	mockgen -source=node_label_module_version_reconciler.go -package=controllers -destination=mock_node_label_module_version_reconciler.go nodeLabelModuleVersionHelperAPI
//
// Package controllers is a generated GoMock package.
package controllers

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MocknodeLabelModuleVersionHelperAPI is a mock of nodeLabelModuleVersionHelperAPI interface.
type MocknodeLabelModuleVersionHelperAPI struct {
	ctrl     *gomock.Controller
	recorder *MocknodeLabelModuleVersionHelperAPIMockRecorder
}

// MocknodeLabelModuleVersionHelperAPIMockRecorder is the mock recorder for MocknodeLabelModuleVersionHelperAPI.
type MocknodeLabelModuleVersionHelperAPIMockRecorder struct {
	mock *MocknodeLabelModuleVersionHelperAPI
}

// NewMocknodeLabelModuleVersionHelperAPI creates a new mock instance.
func NewMocknodeLabelModuleVersionHelperAPI(ctrl *gomock.Controller) *MocknodeLabelModuleVersionHelperAPI {
	mock := &MocknodeLabelModuleVersionHelperAPI{ctrl: ctrl}
	mock.recorder = &MocknodeLabelModuleVersionHelperAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknodeLabelModuleVersionHelperAPI) EXPECT() *MocknodeLabelModuleVersionHelperAPIMockRecorder {
	return m.recorder
}

// getDevicePluginPods mocks base method.
func (m *MocknodeLabelModuleVersionHelperAPI) getDevicePluginPods(ctx context.Context, nodeName string) ([]v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getDevicePluginPods", ctx, nodeName)
	ret0, _ := ret[0].([]v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getDevicePluginPods indicates an expected call of getDevicePluginPods.
func (mr *MocknodeLabelModuleVersionHelperAPIMockRecorder) getDevicePluginPods(ctx, nodeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getDevicePluginPods", reflect.TypeOf((*MocknodeLabelModuleVersionHelperAPI)(nil).getDevicePluginPods), ctx, nodeName)
}

// getLabelsPerModules mocks base method.
func (m *MocknodeLabelModuleVersionHelperAPI) getLabelsPerModules(ctx context.Context, nodeLabels map[string]string) map[string]*modulesVersionLabels {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getLabelsPerModules", ctx, nodeLabels)
	ret0, _ := ret[0].(map[string]*modulesVersionLabels)
	return ret0
}

// getLabelsPerModules indicates an expected call of getLabelsPerModules.
func (mr *MocknodeLabelModuleVersionHelperAPIMockRecorder) getLabelsPerModules(ctx, nodeLabels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getLabelsPerModules", reflect.TypeOf((*MocknodeLabelModuleVersionHelperAPI)(nil).getLabelsPerModules), ctx, nodeLabels)
}

// reconcileLabels mocks base method.
func (m *MocknodeLabelModuleVersionHelperAPI) reconcileLabels(modulesLabels map[string]*modulesVersionLabels, devicePluginPods []v1.Pod) *reconcileLabelsResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "reconcileLabels", modulesLabels, devicePluginPods)
	ret0, _ := ret[0].(*reconcileLabelsResult)
	return ret0
}

// reconcileLabels indicates an expected call of reconcileLabels.
func (mr *MocknodeLabelModuleVersionHelperAPIMockRecorder) reconcileLabels(modulesLabels, devicePluginPods any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "reconcileLabels", reflect.TypeOf((*MocknodeLabelModuleVersionHelperAPI)(nil).reconcileLabels), modulesLabels, devicePluginPods)
}

// updateNodeLabels mocks base method.
func (m *MocknodeLabelModuleVersionHelperAPI) updateNodeLabels(ctx context.Context, nodeName string, reconLabelsRes *reconcileLabelsResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateNodeLabels", ctx, nodeName, reconLabelsRes)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateNodeLabels indicates an expected call of updateNodeLabels.
func (mr *MocknodeLabelModuleVersionHelperAPIMockRecorder) updateNodeLabels(ctx, nodeName, reconLabelsRes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateNodeLabels", reflect.TypeOf((*MocknodeLabelModuleVersionHelperAPI)(nil).updateNodeLabels), ctx, nodeName, reconLabelsRes)
}
