// Code generated by MockGen. DO NOT EDIT.
// Source: mic_reconciler.go
//
// Generated by this command:
//
//	mockgen -source=mic_reconciler.go -package=controllers -destination=mock_mic_reconciler.go micReconcilerHelper
//
// Package controllers is a generated GoMock package.
package controllers

import (
	context "context"
	reflect "reflect"

	v1beta1 "github.com/kubernetes-sigs/kernel-module-management/api/v1beta1"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockmicReconcilerHelper is a mock of micReconcilerHelper interface.
type MockmicReconcilerHelper struct {
	ctrl     *gomock.Controller
	recorder *MockmicReconcilerHelperMockRecorder
}

// MockmicReconcilerHelperMockRecorder is the mock recorder for MockmicReconcilerHelper.
type MockmicReconcilerHelperMockRecorder struct {
	mock *MockmicReconcilerHelper
}

// NewMockmicReconcilerHelper creates a new mock instance.
func NewMockmicReconcilerHelper(ctrl *gomock.Controller) *MockmicReconcilerHelper {
	mock := &MockmicReconcilerHelper{ctrl: ctrl}
	mock.recorder = &MockmicReconcilerHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmicReconcilerHelper) EXPECT() *MockmicReconcilerHelperMockRecorder {
	return m.recorder
}

// processImagesSpecs mocks base method.
func (m *MockmicReconcilerHelper) processImagesSpecs(ctx context.Context, micObj *v1beta1.ModuleImagesConfig, pullPods []v1.Pod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "processImagesSpecs", ctx, micObj, pullPods)
	ret0, _ := ret[0].(error)
	return ret0
}

// processImagesSpecs indicates an expected call of processImagesSpecs.
func (mr *MockmicReconcilerHelperMockRecorder) processImagesSpecs(ctx, micObj, pullPods any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "processImagesSpecs", reflect.TypeOf((*MockmicReconcilerHelper)(nil).processImagesSpecs), ctx, micObj, pullPods)
}

// updateStatusByMBSC mocks base method.
func (m *MockmicReconcilerHelper) updateStatusByMBSC(ctx context.Context, micObj *v1beta1.ModuleImagesConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateStatusByMBSC", ctx, micObj)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateStatusByMBSC indicates an expected call of updateStatusByMBSC.
func (mr *MockmicReconcilerHelperMockRecorder) updateStatusByMBSC(ctx, micObj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateStatusByMBSC", reflect.TypeOf((*MockmicReconcilerHelper)(nil).updateStatusByMBSC), ctx, micObj)
}

// updateStatusByPullPods mocks base method.
func (m *MockmicReconcilerHelper) updateStatusByPullPods(ctx context.Context, micObj *v1beta1.ModuleImagesConfig, pods []v1.Pod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateStatusByPullPods", ctx, micObj, pods)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateStatusByPullPods indicates an expected call of updateStatusByPullPods.
func (mr *MockmicReconcilerHelperMockRecorder) updateStatusByPullPods(ctx, micObj, pods any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateStatusByPullPods", reflect.TypeOf((*MockmicReconcilerHelper)(nil).updateStatusByPullPods), ctx, micObj, pods)
}
