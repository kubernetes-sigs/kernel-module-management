// Code generated by MockGen. DO NOT EDIT.
// Source: module_nmc.go

// Package nmc is a generated GoMock package.
package nmc

import (
	context "context"
	reflect "reflect"

	api "github.com/kubernetes-sigs/kernel-module-management/internal/api"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockModuleNMCHandler is a mock of ModuleNMCHandler interface.
type MockModuleNMCHandler struct {
	ctrl     *gomock.Controller
	recorder *MockModuleNMCHandlerMockRecorder
}

// MockModuleNMCHandlerMockRecorder is the mock recorder for MockModuleNMCHandler.
type MockModuleNMCHandlerMockRecorder struct {
	mock *MockModuleNMCHandler
}

// NewMockModuleNMCHandler creates a new mock instance.
func NewMockModuleNMCHandler(ctrl *gomock.Controller) *MockModuleNMCHandler {
	mock := &MockModuleNMCHandler{ctrl: ctrl}
	mock.recorder = &MockModuleNMCHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModuleNMCHandler) EXPECT() *MockModuleNMCHandlerMockRecorder {
	return m.recorder
}

// handleModuleNMC mocks base method.
func (m *MockModuleNMCHandler) handleModuleNMC(ctx context.Context, mld *api.ModuleLoaderData, nodes []v1.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handleModuleNMC", ctx, mld, nodes)
	ret0, _ := ret[0].(error)
	return ret0
}

// handleModuleNMC indicates an expected call of handleModuleNMC.
func (mr *MockModuleNMCHandlerMockRecorder) handleModuleNMC(ctx, mld, nodes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleModuleNMC", reflect.TypeOf((*MockModuleNMCHandler)(nil).handleModuleNMC), ctx, mld, nodes)
}

// MockmoduleNMCHandlerHelperAPI is a mock of moduleNMCHandlerHelperAPI interface.
type MockmoduleNMCHandlerHelperAPI struct {
	ctrl     *gomock.Controller
	recorder *MockmoduleNMCHandlerHelperAPIMockRecorder
}

// MockmoduleNMCHandlerHelperAPIMockRecorder is the mock recorder for MockmoduleNMCHandlerHelperAPI.
type MockmoduleNMCHandlerHelperAPIMockRecorder struct {
	mock *MockmoduleNMCHandlerHelperAPI
}

// NewMockmoduleNMCHandlerHelperAPI creates a new mock instance.
func NewMockmoduleNMCHandlerHelperAPI(ctrl *gomock.Controller) *MockmoduleNMCHandlerHelperAPI {
	mock := &MockmoduleNMCHandlerHelperAPI{ctrl: ctrl}
	mock.recorder = &MockmoduleNMCHandlerHelperAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmoduleNMCHandlerHelperAPI) EXPECT() *MockmoduleNMCHandlerHelperAPIMockRecorder {
	return m.recorder
}

// disableModuleOnNode mocks base method.
func (m *MockmoduleNMCHandlerHelperAPI) disableModuleOnNode(ctx context.Context, modNamespace, modName, nodeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "disableModuleOnNode", ctx, modNamespace, modName, nodeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// disableModuleOnNode indicates an expected call of disableModuleOnNode.
func (mr *MockmoduleNMCHandlerHelperAPIMockRecorder) disableModuleOnNode(ctx, modNamespace, modName, nodeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "disableModuleOnNode", reflect.TypeOf((*MockmoduleNMCHandlerHelperAPI)(nil).disableModuleOnNode), ctx, modNamespace, modName, nodeName)
}

// enableModuleOnNode mocks base method.
func (m *MockmoduleNMCHandlerHelperAPI) enableModuleOnNode(ctx context.Context, mld *api.ModuleLoaderData, nodeName, kernelVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "enableModuleOnNode", ctx, mld, nodeName, kernelVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// enableModuleOnNode indicates an expected call of enableModuleOnNode.
func (mr *MockmoduleNMCHandlerHelperAPIMockRecorder) enableModuleOnNode(ctx, mld, nodeName, kernelVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "enableModuleOnNode", reflect.TypeOf((*MockmoduleNMCHandlerHelperAPI)(nil).enableModuleOnNode), ctx, mld, nodeName, kernelVersion)
}

// shouldModuleRunOnNode mocks base method.
func (m *MockmoduleNMCHandlerHelperAPI) shouldModuleRunOnNode(node v1.Node, mld *api.ModuleLoaderData, nodeKernelVersion string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "shouldModuleRunOnNode", node, mld, nodeKernelVersion)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// shouldModuleRunOnNode indicates an expected call of shouldModuleRunOnNode.
func (mr *MockmoduleNMCHandlerHelperAPIMockRecorder) shouldModuleRunOnNode(node, mld, nodeKernelVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "shouldModuleRunOnNode", reflect.TypeOf((*MockmoduleNMCHandlerHelperAPI)(nil).shouldModuleRunOnNode), node, mld, nodeKernelVersion)
}
