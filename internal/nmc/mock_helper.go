// Code generated by MockGen. DO NOT EDIT.
// Source: helper.go

// Package nmc is a generated GoMock package.
package nmc

import (
	context "context"
	reflect "reflect"

	v1beta1 "github.com/kubernetes-sigs/kernel-module-management/api/v1beta1"
	gomock "go.uber.org/mock/gomock"
)

// MockHelper is a mock of Helper interface.
type MockHelper struct {
	ctrl     *gomock.Controller
	recorder *MockHelperMockRecorder
}

// MockHelperMockRecorder is the mock recorder for MockHelper.
type MockHelperMockRecorder struct {
	mock *MockHelper
}

// NewMockHelper creates a new mock instance.
func NewMockHelper(ctrl *gomock.Controller) *MockHelper {
	mock := &MockHelper{ctrl: ctrl}
	mock.recorder = &MockHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelper) EXPECT() *MockHelperMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHelper) Get(ctx context.Context, name string) (*v1beta1.NodeModulesConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name)
	ret0, _ := ret[0].(*v1beta1.NodeModulesConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHelperMockRecorder) Get(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHelper)(nil).Get), ctx, name)
}

// GetModuleEntry mocks base method.
func (m *MockHelper) GetModuleEntry(nmc *v1beta1.NodeModulesConfig, modNamespace, modName string) (*v1beta1.NodeModuleSpec, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleEntry", nmc, modNamespace, modName)
	ret0, _ := ret[0].(*v1beta1.NodeModuleSpec)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// GetModuleEntry indicates an expected call of GetModuleEntry.
func (mr *MockHelperMockRecorder) GetModuleEntry(nmc, modNamespace, modName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleEntry", reflect.TypeOf((*MockHelper)(nil).GetModuleEntry), nmc, modNamespace, modName)
}

// SetNMCAsDesired mocks base method.
func (m *MockHelper) SetNMCAsDesired(ctx context.Context, nmc *v1beta1.NodeModulesConfig, namespace, name string, moduleConfig *v1beta1.ModuleConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNMCAsDesired", ctx, nmc, namespace, name, moduleConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNMCAsDesired indicates an expected call of SetNMCAsDesired.
func (mr *MockHelperMockRecorder) SetNMCAsDesired(ctx, nmc, namespace, name, moduleConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNMCAsDesired", reflect.TypeOf((*MockHelper)(nil).SetNMCAsDesired), ctx, nmc, namespace, name, moduleConfig)
}
