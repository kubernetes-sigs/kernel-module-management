// Code generated by MockGen. DO NOT EDIT.
// Source: node.go
//
// Generated by this command:
//
//	mockgen -source=node.go -package=node -destination=mock_node.go
//
// Package node is a generated GoMock package.
package node

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockNode is a mock of Node interface.
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode.
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance.
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// GetNodesListBySelector mocks base method.
func (m *MockNode) GetNodesListBySelector(ctx context.Context, selector map[string]string) ([]v1.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodesListBySelector", ctx, selector)
	ret0, _ := ret[0].([]v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodesListBySelector indicates an expected call of GetNodesListBySelector.
func (mr *MockNodeMockRecorder) GetNodesListBySelector(ctx, selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodesListBySelector", reflect.TypeOf((*MockNode)(nil).GetNodesListBySelector), ctx, selector)
}

// GetNumTargetedNodes mocks base method.
func (m *MockNode) GetNumTargetedNodes(ctx context.Context, selector map[string]string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumTargetedNodes", ctx, selector)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumTargetedNodes indicates an expected call of GetNumTargetedNodes.
func (mr *MockNodeMockRecorder) GetNumTargetedNodes(ctx, selector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumTargetedNodes", reflect.TypeOf((*MockNode)(nil).GetNumTargetedNodes), ctx, selector)
}

// IsNodeSchedulable mocks base method.
func (m *MockNode) IsNodeSchedulable(node *v1.Node) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNodeSchedulable", node)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNodeSchedulable indicates an expected call of IsNodeSchedulable.
func (mr *MockNodeMockRecorder) IsNodeSchedulable(node any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNodeSchedulable", reflect.TypeOf((*MockNode)(nil).IsNodeSchedulable), node)
}

// NodeBecomeReadyAfter mocks base method.
func (m *MockNode) NodeBecomeReadyAfter(node *v1.Node, checkTime v10.Time) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeBecomeReadyAfter", node, checkTime)
	ret0, _ := ret[0].(bool)
	return ret0
}

// NodeBecomeReadyAfter indicates an expected call of NodeBecomeReadyAfter.
func (mr *MockNodeMockRecorder) NodeBecomeReadyAfter(node, checkTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeBecomeReadyAfter", reflect.TypeOf((*MockNode)(nil).NodeBecomeReadyAfter), node, checkTime)
}

// UpdateLabels mocks base method.
func (m *MockNode) UpdateLabels(ctx context.Context, node *v1.Node, toBeAdded, toBeRemoved []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLabels", ctx, node, toBeAdded, toBeRemoved)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLabels indicates an expected call of UpdateLabels.
func (mr *MockNodeMockRecorder) UpdateLabels(ctx, node, toBeAdded, toBeRemoved any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLabels", reflect.TypeOf((*MockNode)(nil).UpdateLabels), ctx, node, toBeAdded, toBeRemoved)
}
