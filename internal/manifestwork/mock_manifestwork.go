// Code generated by MockGen. DO NOT EDIT.
// Source: manifestwork.go

// Package manifestwork is a generated GoMock package.
package manifestwork

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/kubernetes-sigs/kernel-module-management/api/v1beta1"
	v1 "open-cluster-management.io/api/cluster/v1"
	v10 "open-cluster-management.io/api/work/v1"
)

// MockManifestWorkCreator is a mock of ManifestWorkCreator interface.
type MockManifestWorkCreator struct {
	ctrl     *gomock.Controller
	recorder *MockManifestWorkCreatorMockRecorder
}

// MockManifestWorkCreatorMockRecorder is the mock recorder for MockManifestWorkCreator.
type MockManifestWorkCreatorMockRecorder struct {
	mock *MockManifestWorkCreator
}

// NewMockManifestWorkCreator creates a new mock instance.
func NewMockManifestWorkCreator(ctrl *gomock.Controller) *MockManifestWorkCreator {
	mock := &MockManifestWorkCreator{ctrl: ctrl}
	mock.recorder = &MockManifestWorkCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManifestWorkCreator) EXPECT() *MockManifestWorkCreatorMockRecorder {
	return m.recorder
}

// GarbageCollect mocks base method.
func (m *MockManifestWorkCreator) GarbageCollect(ctx context.Context, clusters v1.ManagedClusterList, mcm v1beta1.ManagedClusterModule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GarbageCollect", ctx, clusters, mcm)
	ret0, _ := ret[0].(error)
	return ret0
}

// GarbageCollect indicates an expected call of GarbageCollect.
func (mr *MockManifestWorkCreatorMockRecorder) GarbageCollect(ctx, clusters, mcm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GarbageCollect", reflect.TypeOf((*MockManifestWorkCreator)(nil).GarbageCollect), ctx, clusters, mcm)
}

// SetManifestWorkAsDesired mocks base method.
func (m *MockManifestWorkCreator) SetManifestWorkAsDesired(ctx context.Context, mw *v10.ManifestWork, mcm v1beta1.ManagedClusterModule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetManifestWorkAsDesired", ctx, mw, mcm)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetManifestWorkAsDesired indicates an expected call of SetManifestWorkAsDesired.
func (mr *MockManifestWorkCreatorMockRecorder) SetManifestWorkAsDesired(ctx, mw, mcm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetManifestWorkAsDesired", reflect.TypeOf((*MockManifestWorkCreator)(nil).SetManifestWorkAsDesired), ctx, mw, mcm)
}
