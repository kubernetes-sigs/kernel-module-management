// Code generated by MockGen. DO NOT EDIT.
// Source: cluster.go
//
// Generated by this command:
//
//	mockgen -source=cluster.go -package=cluster -destination=mock_cluster.go
//
// Package cluster is a generated GoMock package.
package cluster

import (
	context "context"
	reflect "reflect"

	v1beta1 "github.com/kubernetes-sigs/kernel-module-management/api-hub/v1beta1"
	api "github.com/kubernetes-sigs/kernel-module-management/internal/api"
	gomock "go.uber.org/mock/gomock"
	v1 "open-cluster-management.io/api/cluster/v1"
)

// MockClusterAPI is a mock of ClusterAPI interface.
type MockClusterAPI struct {
	ctrl     *gomock.Controller
	recorder *MockClusterAPIMockRecorder
}

// MockClusterAPIMockRecorder is the mock recorder for MockClusterAPI.
type MockClusterAPIMockRecorder struct {
	mock *MockClusterAPI
}

// NewMockClusterAPI creates a new mock instance.
func NewMockClusterAPI(ctrl *gomock.Controller) *MockClusterAPI {
	mock := &MockClusterAPI{ctrl: ctrl}
	mock.recorder = &MockClusterAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterAPI) EXPECT() *MockClusterAPIMockRecorder {
	return m.recorder
}

// GetDefaultArtifactsNamespace mocks base method.
func (m *MockClusterAPI) GetDefaultArtifactsNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultArtifactsNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDefaultArtifactsNamespace indicates an expected call of GetDefaultArtifactsNamespace.
func (mr *MockClusterAPIMockRecorder) GetDefaultArtifactsNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultArtifactsNamespace", reflect.TypeOf((*MockClusterAPI)(nil).GetDefaultArtifactsNamespace))
}

// GetModuleLoaderDataForKernel mocks base method.
func (m *MockClusterAPI) GetModuleLoaderDataForKernel(mcm *v1beta1.ManagedClusterModule, kernelVersion string) (*api.ModuleLoaderData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleLoaderDataForKernel", mcm, kernelVersion)
	ret0, _ := ret[0].(*api.ModuleLoaderData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModuleLoaderDataForKernel indicates an expected call of GetModuleLoaderDataForKernel.
func (mr *MockClusterAPIMockRecorder) GetModuleLoaderDataForKernel(mcm, kernelVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleLoaderDataForKernel", reflect.TypeOf((*MockClusterAPI)(nil).GetModuleLoaderDataForKernel), mcm, kernelVersion)
}

// KernelVersions mocks base method.
func (m *MockClusterAPI) KernelVersions(cluster v1.ManagedCluster) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelVersions", cluster)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KernelVersions indicates an expected call of KernelVersions.
func (mr *MockClusterAPIMockRecorder) KernelVersions(cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelVersions", reflect.TypeOf((*MockClusterAPI)(nil).KernelVersions), cluster)
}

// SelectedManagedClusters mocks base method.
func (m *MockClusterAPI) SelectedManagedClusters(ctx context.Context, mcm *v1beta1.ManagedClusterModule) (*v1.ManagedClusterList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectedManagedClusters", ctx, mcm)
	ret0, _ := ret[0].(*v1.ManagedClusterList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectedManagedClusters indicates an expected call of SelectedManagedClusters.
func (mr *MockClusterAPIMockRecorder) SelectedManagedClusters(ctx, mcm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectedManagedClusters", reflect.TypeOf((*MockClusterAPI)(nil).SelectedManagedClusters), ctx, mcm)
}
