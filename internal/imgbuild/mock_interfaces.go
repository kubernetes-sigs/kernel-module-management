// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package imgbuild is a generated GoMock package.
package imgbuild

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/kubernetes-sigs/kernel-module-management/internal/api"
	v1 "k8s.io/api/batch/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockJobMaker is a mock of JobMaker interface.
type MockJobMaker struct {
	ctrl     *gomock.Controller
	recorder *MockJobMakerMockRecorder
}

// MockJobMakerMockRecorder is the mock recorder for MockJobMaker.
type MockJobMakerMockRecorder struct {
	mock *MockJobMaker
}

// NewMockJobMaker creates a new mock instance.
func NewMockJobMaker(ctrl *gomock.Controller) *MockJobMaker {
	mock := &MockJobMaker{ctrl: ctrl}
	mock.recorder = &MockJobMakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobMaker) EXPECT() *MockJobMakerMockRecorder {
	return m.recorder
}

// MakeJob mocks base method.
func (m *MockJobMaker) MakeJob(ctx context.Context, mld *api.ModuleLoaderData, owner v10.Object, pushImage bool) (*v1.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeJob", ctx, mld, owner, pushImage)
	ret0, _ := ret[0].(*v1.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeJob indicates an expected call of MakeJob.
func (mr *MockJobMakerMockRecorder) MakeJob(ctx, mld, owner, pushImage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeJob", reflect.TypeOf((*MockJobMaker)(nil).MakeJob), ctx, mld, owner, pushImage)
}

// MockJobManager is a mock of JobManager interface.
type MockJobManager struct {
	ctrl     *gomock.Controller
	recorder *MockJobManagerMockRecorder
}

// MockJobManagerMockRecorder is the mock recorder for MockJobManager.
type MockJobManagerMockRecorder struct {
	mock *MockJobManager
}

// NewMockJobManager creates a new mock instance.
func NewMockJobManager(ctrl *gomock.Controller) *MockJobManager {
	mock := &MockJobManager{ctrl: ctrl}
	mock.recorder = &MockJobManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobManager) EXPECT() *MockJobManagerMockRecorder {
	return m.recorder
}

// GarbageCollect mocks base method.
func (m *MockJobManager) GarbageCollect(ctx context.Context, modName, namespace string, owner v10.Object) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GarbageCollect", ctx, modName, namespace, owner)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GarbageCollect indicates an expected call of GarbageCollect.
func (mr *MockJobManagerMockRecorder) GarbageCollect(ctx, modName, namespace, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GarbageCollect", reflect.TypeOf((*MockJobManager)(nil).GarbageCollect), ctx, modName, namespace, owner)
}

// ShouldSync mocks base method.
func (m *MockJobManager) ShouldSync(ctx context.Context, mld *api.ModuleLoaderData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldSync", ctx, mld)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldSync indicates an expected call of ShouldSync.
func (mr *MockJobManagerMockRecorder) ShouldSync(ctx, mld interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldSync", reflect.TypeOf((*MockJobManager)(nil).ShouldSync), ctx, mld)
}

// Sync mocks base method.
func (m *MockJobManager) Sync(ctx context.Context, mld *api.ModuleLoaderData, pushImage bool, owner v10.Object) (Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx, mld, pushImage, owner)
	ret0, _ := ret[0].(Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockJobManagerMockRecorder) Sync(ctx, mld, pushImage, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockJobManager)(nil).Sync), ctx, mld, pushImage, owner)
}
