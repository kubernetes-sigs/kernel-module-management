// Code generated by MockGen. DO NOT EDIT.
// Source: signer.go
//
// Generated by this command:
//
//	mockgen -source=signer.go -package=signpod -destination=mock_signer.go
//
// Package signpod is a generated GoMock package.
package signpod

import (
	context "context"
	reflect "reflect"

	api "github.com/kubernetes-sigs/kernel-module-management/internal/api"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockSigner is a mock of Signer interface.
type MockSigner struct {
	ctrl     *gomock.Controller
	recorder *MockSignerMockRecorder
}

// MockSignerMockRecorder is the mock recorder for MockSigner.
type MockSignerMockRecorder struct {
	mock *MockSigner
}

// NewMockSigner creates a new mock instance.
func NewMockSigner(ctrl *gomock.Controller) *MockSigner {
	mock := &MockSigner{ctrl: ctrl}
	mock.recorder = &MockSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSigner) EXPECT() *MockSignerMockRecorder {
	return m.recorder
}

// MakePodTemplate mocks base method.
func (m *MockSigner) MakePodTemplate(ctx context.Context, mld *api.ModuleLoaderData, labels map[string]string, imageToSign string, pushImage bool, owner v10.Object) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakePodTemplate", ctx, mld, labels, imageToSign, pushImage, owner)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakePodTemplate indicates an expected call of MakePodTemplate.
func (mr *MockSignerMockRecorder) MakePodTemplate(ctx, mld, labels, imageToSign, pushImage, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePodTemplate", reflect.TypeOf((*MockSigner)(nil).MakePodTemplate), ctx, mld, labels, imageToSign, pushImage, owner)
}
