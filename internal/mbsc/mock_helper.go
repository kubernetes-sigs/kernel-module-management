// Code generated by MockGen. DO NOT EDIT.
// Source: helper.go
//
// Generated by this command:
//
//	mockgen -source=helper.go -package=mbsc -destination=mock_helper.go
//
// Package mbsc is a generated GoMock package.
package mbsc

import (
	reflect "reflect"

	v1beta1 "github.com/kubernetes-sigs/kernel-module-management/api/v1beta1"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockHelper is a mock of Helper interface.
type MockHelper struct {
	ctrl     *gomock.Controller
	recorder *MockHelperMockRecorder
}

// MockHelperMockRecorder is the mock recorder for MockHelper.
type MockHelperMockRecorder struct {
	mock *MockHelper
}

// NewMockHelper creates a new mock instance.
func NewMockHelper(ctrl *gomock.Controller) *MockHelper {
	mock := &MockHelper{ctrl: ctrl}
	mock.recorder = &MockHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelper) EXPECT() *MockHelperMockRecorder {
	return m.recorder
}

// SetModuleImageSpec mocks base method.
func (m *MockHelper) SetModuleImageSpec(mbscObj *v1beta1.ModuleBuildSignConfig, imageSpec *v1beta1.ModuleImageSpec, repoSecret *v1.LocalObjectReference) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetModuleImageSpec", mbscObj, imageSpec, repoSecret)
}

// SetModuleImageSpec indicates an expected call of SetModuleImageSpec.
func (mr *MockHelperMockRecorder) SetModuleImageSpec(mbscObj, imageSpec, repoSecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModuleImageSpec", reflect.TypeOf((*MockHelper)(nil).SetModuleImageSpec), mbscObj, imageSpec, repoSecret)
}
