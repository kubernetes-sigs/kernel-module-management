// Code generated by MockGen. DO NOT EDIT.
// Source: resourcemanager.go
//
// Generated by this command:
//
//	mockgen -source=resourcemanager.go -package=buildsign -destination=mock_resourcemanager.go
//
// Package buildsign is a generated GoMock package.
package buildsign

import (
	context "context"
	reflect "reflect"

	v1beta1 "github.com/kubernetes-sigs/kernel-module-management/api/v1beta1"
	api "github.com/kubernetes-sigs/kernel-module-management/internal/api"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockResourceManager is a mock of ResourceManager interface.
type MockResourceManager struct {
	ctrl     *gomock.Controller
	recorder *MockResourceManagerMockRecorder
}

// MockResourceManagerMockRecorder is the mock recorder for MockResourceManager.
type MockResourceManagerMockRecorder struct {
	mock *MockResourceManager
}

// NewMockResourceManager creates a new mock instance.
func NewMockResourceManager(ctrl *gomock.Controller) *MockResourceManager {
	mock := &MockResourceManager{ctrl: ctrl}
	mock.recorder = &MockResourceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceManager) EXPECT() *MockResourceManagerMockRecorder {
	return m.recorder
}

// CreateResource mocks base method.
func (m *MockResourceManager) CreateResource(ctx context.Context, template v1.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResource", ctx, template)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateResource indicates an expected call of CreateResource.
func (mr *MockResourceManagerMockRecorder) CreateResource(ctx, template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResource", reflect.TypeOf((*MockResourceManager)(nil).CreateResource), ctx, template)
}

// DeleteResource mocks base method.
func (m *MockResourceManager) DeleteResource(ctx context.Context, obj v1.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", ctx, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockResourceManagerMockRecorder) DeleteResource(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockResourceManager)(nil).DeleteResource), ctx, obj)
}

// GetModuleResources mocks base method.
func (m *MockResourceManager) GetModuleResources(ctx context.Context, modName, namespace string, resourceType v1beta1.BuildOrSignAction, owner v1.Object) ([]v1.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleResources", ctx, modName, namespace, resourceType, owner)
	ret0, _ := ret[0].([]v1.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModuleResources indicates an expected call of GetModuleResources.
func (mr *MockResourceManagerMockRecorder) GetModuleResources(ctx, modName, namespace, resourceType, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleResources", reflect.TypeOf((*MockResourceManager)(nil).GetModuleResources), ctx, modName, namespace, resourceType, owner)
}

// GetResourceByKernel mocks base method.
func (m *MockResourceManager) GetResourceByKernel(ctx context.Context, name, namespace, targetKernel string, resourceType v1beta1.BuildOrSignAction, owner v1.Object) (v1.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceByKernel", ctx, name, namespace, targetKernel, resourceType, owner)
	ret0, _ := ret[0].(v1.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceByKernel indicates an expected call of GetResourceByKernel.
func (mr *MockResourceManagerMockRecorder) GetResourceByKernel(ctx, name, namespace, targetKernel, resourceType, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceByKernel", reflect.TypeOf((*MockResourceManager)(nil).GetResourceByKernel), ctx, name, namespace, targetKernel, resourceType, owner)
}

// GetResourceStatus mocks base method.
func (m *MockResourceManager) GetResourceStatus(obj v1.Object) (Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceStatus", obj)
	ret0, _ := ret[0].(Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceStatus indicates an expected call of GetResourceStatus.
func (mr *MockResourceManagerMockRecorder) GetResourceStatus(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceStatus", reflect.TypeOf((*MockResourceManager)(nil).GetResourceStatus), obj)
}

// HasResourcesCompletedSuccessfully mocks base method.
func (m *MockResourceManager) HasResourcesCompletedSuccessfully(ctx context.Context, obj v1.Object) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasResourcesCompletedSuccessfully", ctx, obj)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasResourcesCompletedSuccessfully indicates an expected call of HasResourcesCompletedSuccessfully.
func (mr *MockResourceManagerMockRecorder) HasResourcesCompletedSuccessfully(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasResourcesCompletedSuccessfully", reflect.TypeOf((*MockResourceManager)(nil).HasResourcesCompletedSuccessfully), ctx, obj)
}

// IsResourceChanged mocks base method.
func (m *MockResourceManager) IsResourceChanged(existingObj, newObj v1.Object) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsResourceChanged", existingObj, newObj)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsResourceChanged indicates an expected call of IsResourceChanged.
func (mr *MockResourceManagerMockRecorder) IsResourceChanged(existingObj, newObj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsResourceChanged", reflect.TypeOf((*MockResourceManager)(nil).IsResourceChanged), existingObj, newObj)
}

// MakeResourceTemplate mocks base method.
func (m *MockResourceManager) MakeResourceTemplate(ctx context.Context, mld *api.ModuleLoaderData, owner v1.Object, pushImage bool, resourceType v1beta1.BuildOrSignAction) (v1.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeResourceTemplate", ctx, mld, owner, pushImage, resourceType)
	ret0, _ := ret[0].(v1.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeResourceTemplate indicates an expected call of MakeResourceTemplate.
func (mr *MockResourceManagerMockRecorder) MakeResourceTemplate(ctx, mld, owner, pushImage, resourceType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeResourceTemplate", reflect.TypeOf((*MockResourceManager)(nil).MakeResourceTemplate), ctx, mld, owner, pushImage, resourceType)
}
