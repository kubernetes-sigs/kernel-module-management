// Code generated by MockGen. DO NOT EDIT.
// Source: buildsignpodmanager.go
//
// Generated by this command:
//
//	mockgen -source=buildsignpodmanager.go -package=pod -destination=mock_buildsignpodmanager.go
//
// Package pod is a generated GoMock package.
package pod

import (
	context "context"
	reflect "reflect"

	api "github.com/kubernetes-sigs/kernel-module-management/internal/api"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockBuildSignPodManager is a mock of BuildSignPodManager interface.
type MockBuildSignPodManager struct {
	ctrl     *gomock.Controller
	recorder *MockBuildSignPodManagerMockRecorder
}

// MockBuildSignPodManagerMockRecorder is the mock recorder for MockBuildSignPodManager.
type MockBuildSignPodManagerMockRecorder struct {
	mock *MockBuildSignPodManager
}

// NewMockBuildSignPodManager creates a new mock instance.
func NewMockBuildSignPodManager(ctrl *gomock.Controller) *MockBuildSignPodManager {
	mock := &MockBuildSignPodManager{ctrl: ctrl}
	mock.recorder = &MockBuildSignPodManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildSignPodManager) EXPECT() *MockBuildSignPodManagerMockRecorder {
	return m.recorder
}

// CreatePod mocks base method.
func (m *MockBuildSignPodManager) CreatePod(ctx context.Context, podSpec *v1.Pod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePod", ctx, podSpec)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePod indicates an expected call of CreatePod.
func (mr *MockBuildSignPodManagerMockRecorder) CreatePod(ctx, podSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePod", reflect.TypeOf((*MockBuildSignPodManager)(nil).CreatePod), ctx, podSpec)
}

// DeletePod mocks base method.
func (m *MockBuildSignPodManager) DeletePod(ctx context.Context, pod *v1.Pod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePod", ctx, pod)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePod indicates an expected call of DeletePod.
func (mr *MockBuildSignPodManagerMockRecorder) DeletePod(ctx, pod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePod", reflect.TypeOf((*MockBuildSignPodManager)(nil).DeletePod), ctx, pod)
}

// GetModulePodByKernel mocks base method.
func (m *MockBuildSignPodManager) GetModulePodByKernel(ctx context.Context, modName, namespace, targetKernel, podType string, owner v10.Object) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModulePodByKernel", ctx, modName, namespace, targetKernel, podType, owner)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModulePodByKernel indicates an expected call of GetModulePodByKernel.
func (mr *MockBuildSignPodManagerMockRecorder) GetModulePodByKernel(ctx, modName, namespace, targetKernel, podType, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModulePodByKernel", reflect.TypeOf((*MockBuildSignPodManager)(nil).GetModulePodByKernel), ctx, modName, namespace, targetKernel, podType, owner)
}

// GetModulePods mocks base method.
func (m *MockBuildSignPodManager) GetModulePods(ctx context.Context, modName, namespace, podType string, owner v10.Object) ([]v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModulePods", ctx, modName, namespace, podType, owner)
	ret0, _ := ret[0].([]v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModulePods indicates an expected call of GetModulePods.
func (mr *MockBuildSignPodManagerMockRecorder) GetModulePods(ctx, modName, namespace, podType, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModulePods", reflect.TypeOf((*MockBuildSignPodManager)(nil).GetModulePods), ctx, modName, namespace, podType, owner)
}

// GetPodStatus mocks base method.
func (m *MockBuildSignPodManager) GetPodStatus(pod *v1.Pod) (Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodStatus", pod)
	ret0, _ := ret[0].(Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodStatus indicates an expected call of GetPodStatus.
func (mr *MockBuildSignPodManagerMockRecorder) GetPodStatus(pod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodStatus", reflect.TypeOf((*MockBuildSignPodManager)(nil).GetPodStatus), pod)
}

// IsPodChanged mocks base method.
func (m *MockBuildSignPodManager) IsPodChanged(existingPod, newPod *v1.Pod) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPodChanged", existingPod, newPod)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPodChanged indicates an expected call of IsPodChanged.
func (mr *MockBuildSignPodManagerMockRecorder) IsPodChanged(existingPod, newPod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPodChanged", reflect.TypeOf((*MockBuildSignPodManager)(nil).IsPodChanged), existingPod, newPod)
}

// MakeBuildResourceTemplate mocks base method.
func (m *MockBuildSignPodManager) MakeBuildResourceTemplate(ctx context.Context, mld *api.ModuleLoaderData, owner v10.Object, pushImage bool) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeBuildResourceTemplate", ctx, mld, owner, pushImage)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeBuildResourceTemplate indicates an expected call of MakeBuildResourceTemplate.
func (mr *MockBuildSignPodManagerMockRecorder) MakeBuildResourceTemplate(ctx, mld, owner, pushImage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeBuildResourceTemplate", reflect.TypeOf((*MockBuildSignPodManager)(nil).MakeBuildResourceTemplate), ctx, mld, owner, pushImage)
}

// MakeSignResourceTemplate mocks base method.
func (m *MockBuildSignPodManager) MakeSignResourceTemplate(ctx context.Context, mld *api.ModuleLoaderData, owner v10.Object, pushImage bool) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeSignResourceTemplate", ctx, mld, owner, pushImage)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeSignResourceTemplate indicates an expected call of MakeSignResourceTemplate.
func (mr *MockBuildSignPodManagerMockRecorder) MakeSignResourceTemplate(ctx, mld, owner, pushImage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeSignResourceTemplate", reflect.TypeOf((*MockBuildSignPodManager)(nil).MakeSignResourceTemplate), ctx, mld, owner, pushImage)
}

// PodLabels mocks base method.
func (m *MockBuildSignPodManager) PodLabels(modName, targetKernel, podType string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodLabels", modName, targetKernel, podType)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// PodLabels indicates an expected call of PodLabels.
func (mr *MockBuildSignPodManagerMockRecorder) PodLabels(modName, targetKernel, podType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodLabels", reflect.TypeOf((*MockBuildSignPodManager)(nil).PodLabels), modName, targetKernel, podType)
}
