// Code generated by MockGen. DO NOT EDIT.
// Source: buildsignresourcemanager.go
//
// Generated by this command:
//
//	mockgen -source=buildsignresourcemanager.go -package=buildsign -destination=mock_buildsignresourcemanager.go
//
// Package buildsign is a generated GoMock package.
package buildsign

import (
	context "context"
	reflect "reflect"

	v1beta1 "github.com/kubernetes-sigs/kernel-module-management/api/v1beta1"
	api "github.com/kubernetes-sigs/kernel-module-management/internal/api"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockBuildSignResourceManager is a mock of BuildSignResourceManager interface.
type MockBuildSignResourceManager struct {
	ctrl     *gomock.Controller
	recorder *MockBuildSignResourceManagerMockRecorder
}

// MockBuildSignResourceManagerMockRecorder is the mock recorder for MockBuildSignResourceManager.
type MockBuildSignResourceManagerMockRecorder struct {
	mock *MockBuildSignResourceManager
}

// NewMockBuildSignResourceManager creates a new mock instance.
func NewMockBuildSignResourceManager(ctrl *gomock.Controller) *MockBuildSignResourceManager {
	mock := &MockBuildSignResourceManager{ctrl: ctrl}
	mock.recorder = &MockBuildSignResourceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildSignResourceManager) EXPECT() *MockBuildSignResourceManagerMockRecorder {
	return m.recorder
}

// CreateBuildSignResource mocks base method.
func (m *MockBuildSignResourceManager) CreateBuildSignResource(ctx context.Context, template v1.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuildSignResource", ctx, template)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBuildSignResource indicates an expected call of CreateBuildSignResource.
func (mr *MockBuildSignResourceManagerMockRecorder) CreateBuildSignResource(ctx, template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuildSignResource", reflect.TypeOf((*MockBuildSignResourceManager)(nil).CreateBuildSignResource), ctx, template)
}

// DeleteBuildSignResource mocks base method.
func (m *MockBuildSignResourceManager) DeleteBuildSignResource(ctx context.Context, obj v1.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBuildSignResource", ctx, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBuildSignResource indicates an expected call of DeleteBuildSignResource.
func (mr *MockBuildSignResourceManagerMockRecorder) DeleteBuildSignResource(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBuildSignResource", reflect.TypeOf((*MockBuildSignResourceManager)(nil).DeleteBuildSignResource), ctx, obj)
}

// GetBuildSignResourceByKernel mocks base method.
func (m *MockBuildSignResourceManager) GetBuildSignResourceByKernel(ctx context.Context, name, namespace, targetKernel string, resourceType v1beta1.BuildOrSignAction, owner v1.Object) (v1.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildSignResourceByKernel", ctx, name, namespace, targetKernel, resourceType, owner)
	ret0, _ := ret[0].(v1.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildSignResourceByKernel indicates an expected call of GetBuildSignResourceByKernel.
func (mr *MockBuildSignResourceManagerMockRecorder) GetBuildSignResourceByKernel(ctx, name, namespace, targetKernel, resourceType, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildSignResourceByKernel", reflect.TypeOf((*MockBuildSignResourceManager)(nil).GetBuildSignResourceByKernel), ctx, name, namespace, targetKernel, resourceType, owner)
}

// GetBuildSignResourceStatus mocks base method.
func (m *MockBuildSignResourceManager) GetBuildSignResourceStatus(obj v1.Object) (Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildSignResourceStatus", obj)
	ret0, _ := ret[0].(Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildSignResourceStatus indicates an expected call of GetBuildSignResourceStatus.
func (mr *MockBuildSignResourceManagerMockRecorder) GetBuildSignResourceStatus(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildSignResourceStatus", reflect.TypeOf((*MockBuildSignResourceManager)(nil).GetBuildSignResourceStatus), obj)
}

// GetModuleResources mocks base method.
func (m *MockBuildSignResourceManager) GetModuleResources(ctx context.Context, modName, namespace string, resourceType v1beta1.BuildOrSignAction, owner v1.Object) ([]v1.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleResources", ctx, modName, namespace, resourceType, owner)
	ret0, _ := ret[0].([]v1.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModuleResources indicates an expected call of GetModuleResources.
func (mr *MockBuildSignResourceManagerMockRecorder) GetModuleResources(ctx, modName, namespace, resourceType, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleResources", reflect.TypeOf((*MockBuildSignResourceManager)(nil).GetModuleResources), ctx, modName, namespace, resourceType, owner)
}

// IsBuildSignResourceChanged mocks base method.
func (m *MockBuildSignResourceManager) IsBuildSignResourceChanged(existingObj, newObj v1.Object) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBuildSignResourceChanged", existingObj, newObj)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBuildSignResourceChanged indicates an expected call of IsBuildSignResourceChanged.
func (mr *MockBuildSignResourceManagerMockRecorder) IsBuildSignResourceChanged(existingObj, newObj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBuildSignResourceChanged", reflect.TypeOf((*MockBuildSignResourceManager)(nil).IsBuildSignResourceChanged), existingObj, newObj)
}

// IsStatusPhaseSucceed mocks base method.
func (m *MockBuildSignResourceManager) IsStatusPhaseSucceed(ctx context.Context, obj v1.Object) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStatusPhaseSucceed", ctx, obj)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsStatusPhaseSucceed indicates an expected call of IsStatusPhaseSucceed.
func (mr *MockBuildSignResourceManagerMockRecorder) IsStatusPhaseSucceed(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStatusPhaseSucceed", reflect.TypeOf((*MockBuildSignResourceManager)(nil).IsStatusPhaseSucceed), ctx, obj)
}

// MakeBuildResourceTemplate mocks base method.
func (m *MockBuildSignResourceManager) MakeBuildResourceTemplate(ctx context.Context, mld *api.ModuleLoaderData, owner v1.Object, pushImage bool) (v1.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeBuildResourceTemplate", ctx, mld, owner, pushImage)
	ret0, _ := ret[0].(v1.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeBuildResourceTemplate indicates an expected call of MakeBuildResourceTemplate.
func (mr *MockBuildSignResourceManagerMockRecorder) MakeBuildResourceTemplate(ctx, mld, owner, pushImage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeBuildResourceTemplate", reflect.TypeOf((*MockBuildSignResourceManager)(nil).MakeBuildResourceTemplate), ctx, mld, owner, pushImage)
}

// MakeSignResourceTemplate mocks base method.
func (m *MockBuildSignResourceManager) MakeSignResourceTemplate(ctx context.Context, mld *api.ModuleLoaderData, owner v1.Object, pushImage bool) (v1.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeSignResourceTemplate", ctx, mld, owner, pushImage)
	ret0, _ := ret[0].(v1.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeSignResourceTemplate indicates an expected call of MakeSignResourceTemplate.
func (mr *MockBuildSignResourceManagerMockRecorder) MakeSignResourceTemplate(ctx, mld, owner, pushImage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeSignResourceTemplate", reflect.TypeOf((*MockBuildSignResourceManager)(nil).MakeSignResourceTemplate), ctx, mld, owner, pushImage)
}
