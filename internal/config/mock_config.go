// Code generated by MockGen. DO NOT EDIT.
// Source: config.go
//
// Generated by this command:
//
//	mockgen -source=config.go -package=config -destination=mock_config.go ConfigGetter,configHelperAPI
//
// Package config is a generated GoMock package.
package config

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	context "golang.org/x/net/context"
	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	client "sigs.k8s.io/controller-runtime/pkg/client"
	manager "sigs.k8s.io/controller-runtime/pkg/manager"
)

// MockConfigGetter is a mock of ConfigGetter interface.
type MockConfigGetter struct {
	ctrl     *gomock.Controller
	recorder *MockConfigGetterMockRecorder
}

// MockConfigGetterMockRecorder is the mock recorder for MockConfigGetter.
type MockConfigGetterMockRecorder struct {
	mock *MockConfigGetter
}

// NewMockConfigGetter creates a new mock instance.
func NewMockConfigGetter(ctrl *gomock.Controller) *MockConfigGetter {
	mock := &MockConfigGetter{ctrl: ctrl}
	mock.recorder = &MockConfigGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigGetter) EXPECT() *MockConfigGetterMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockConfigGetter) GetConfig(ctx context.Context, userConfigMapName, userConfigMapNamespace string, isHubConfig bool) (*Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", ctx, userConfigMapName, userConfigMapNamespace, isHubConfig)
	ret0, _ := ret[0].(*Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockConfigGetterMockRecorder) GetConfig(ctx, userConfigMapName, userConfigMapNamespace, isHubConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockConfigGetter)(nil).GetConfig), ctx, userConfigMapName, userConfigMapNamespace, isHubConfig)
}

// GetManagerOptionsFromConfig mocks base method.
func (m *MockConfigGetter) GetManagerOptionsFromConfig(conf *Config, scheme *runtime.Scheme) manager.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagerOptionsFromConfig", conf, scheme)
	ret0, _ := ret[0].(manager.Options)
	return ret0
}

// GetManagerOptionsFromConfig indicates an expected call of GetManagerOptionsFromConfig.
func (mr *MockConfigGetterMockRecorder) GetManagerOptionsFromConfig(conf, scheme any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagerOptionsFromConfig", reflect.TypeOf((*MockConfigGetter)(nil).GetManagerOptionsFromConfig), conf, scheme)
}

// MockconfigHelperAPI is a mock of configHelperAPI interface.
type MockconfigHelperAPI struct {
	ctrl     *gomock.Controller
	recorder *MockconfigHelperAPIMockRecorder
}

// MockconfigHelperAPIMockRecorder is the mock recorder for MockconfigHelperAPI.
type MockconfigHelperAPIMockRecorder struct {
	mock *MockconfigHelperAPI
}

// NewMockconfigHelperAPI creates a new mock instance.
func NewMockconfigHelperAPI(ctrl *gomock.Controller) *MockconfigHelperAPI {
	mock := &MockconfigHelperAPI{ctrl: ctrl}
	mock.recorder = &MockconfigHelperAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockconfigHelperAPI) EXPECT() *MockconfigHelperAPIMockRecorder {
	return m.recorder
}

// decodeStrictYAMLIntoConfig mocks base method.
func (m *MockconfigHelperAPI) decodeStrictYAMLIntoConfig(yamlData []byte, config *Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "decodeStrictYAMLIntoConfig", yamlData, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// decodeStrictYAMLIntoConfig indicates an expected call of decodeStrictYAMLIntoConfig.
func (mr *MockconfigHelperAPIMockRecorder) decodeStrictYAMLIntoConfig(yamlData, config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "decodeStrictYAMLIntoConfig", reflect.TypeOf((*MockconfigHelperAPI)(nil).decodeStrictYAMLIntoConfig), yamlData, config)
}

// getClient mocks base method.
func (m *MockconfigHelperAPI) getClient() (client.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getClient")
	ret0, _ := ret[0].(client.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getClient indicates an expected call of getClient.
func (mr *MockconfigHelperAPIMockRecorder) getClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getClient", reflect.TypeOf((*MockconfigHelperAPI)(nil).getClient))
}

// newDefaultConfig mocks base method.
func (m *MockconfigHelperAPI) newDefaultConfig(isHubConfig bool) *Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "newDefaultConfig", isHubConfig)
	ret0, _ := ret[0].(*Config)
	return ret0
}

// newDefaultConfig indicates an expected call of newDefaultConfig.
func (mr *MockconfigHelperAPIMockRecorder) newDefaultConfig(isHubConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "newDefaultConfig", reflect.TypeOf((*MockconfigHelperAPI)(nil).newDefaultConfig), isHubConfig)
}

// overrideConfigFromCM mocks base method.
func (m *MockconfigHelperAPI) overrideConfigFromCM(cm *v1.ConfigMap, cfg *Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "overrideConfigFromCM", cm, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// overrideConfigFromCM indicates an expected call of overrideConfigFromCM.
func (mr *MockconfigHelperAPIMockRecorder) overrideConfigFromCM(cm, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "overrideConfigFromCM", reflect.TypeOf((*MockconfigHelperAPI)(nil).overrideConfigFromCM), cm, cfg)
}
