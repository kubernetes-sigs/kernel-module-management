// Code generated by MockGen. DO NOT EDIT.
// Source: registry.go
//
// Generated by this command:
//
//	mockgen -source=registry.go -package=registry -destination=mock_registry_api.go
//
// Package registry is a generated GoMock package.
package registry

import (
	context "context"
	reflect "reflect"

	v1 "github.com/google/go-containerregistry/pkg/v1"
	v1beta1 "github.com/kubernetes-sigs/kernel-module-management/api/v1beta1"
	auth "github.com/kubernetes-sigs/kernel-module-management/internal/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockRegistry is a mock of Registry interface.
type MockRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryMockRecorder
}

// MockRegistryMockRecorder is the mock recorder for MockRegistry.
type MockRegistryMockRecorder struct {
	mock *MockRegistry
}

// NewMockRegistry creates a new mock instance.
func NewMockRegistry(ctrl *gomock.Controller) *MockRegistry {
	mock := &MockRegistry{ctrl: ctrl}
	mock.recorder = &MockRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistry) EXPECT() *MockRegistryMockRecorder {
	return m.recorder
}

// GetDigest mocks base method.
func (m *MockRegistry) GetDigest(ctx context.Context, image string, tlsOptions *v1beta1.TLSOptions, registryAuthGetter auth.RegistryAuthGetter) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDigest", ctx, image, tlsOptions, registryAuthGetter)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDigest indicates an expected call of GetDigest.
func (mr *MockRegistryMockRecorder) GetDigest(ctx, image, tlsOptions, registryAuthGetter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDigest", reflect.TypeOf((*MockRegistry)(nil).GetDigest), ctx, image, tlsOptions, registryAuthGetter)
}

// GetLayerByDigest mocks base method.
func (m *MockRegistry) GetLayerByDigest(digest string, pullConfig *RepoPullConfig) (v1.Layer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayerByDigest", digest, pullConfig)
	ret0, _ := ret[0].(v1.Layer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLayerByDigest indicates an expected call of GetLayerByDigest.
func (mr *MockRegistryMockRecorder) GetLayerByDigest(digest, pullConfig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayerByDigest", reflect.TypeOf((*MockRegistry)(nil).GetLayerByDigest), digest, pullConfig)
}

// GetLayersDigests mocks base method.
func (m *MockRegistry) GetLayersDigests(ctx context.Context, image string, tlsOptions *v1beta1.TLSOptions, registryAuthGetter auth.RegistryAuthGetter) ([]string, *RepoPullConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayersDigests", ctx, image, tlsOptions, registryAuthGetter)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*RepoPullConfig)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLayersDigests indicates an expected call of GetLayersDigests.
func (mr *MockRegistryMockRecorder) GetLayersDigests(ctx, image, tlsOptions, registryAuthGetter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayersDigests", reflect.TypeOf((*MockRegistry)(nil).GetLayersDigests), ctx, image, tlsOptions, registryAuthGetter)
}

// ImageExists mocks base method.
func (m *MockRegistry) ImageExists(ctx context.Context, image string, tlsOptions *v1beta1.TLSOptions, registryAuthGetter auth.RegistryAuthGetter) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageExists", ctx, image, tlsOptions, registryAuthGetter)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageExists indicates an expected call of ImageExists.
func (mr *MockRegistryMockRecorder) ImageExists(ctx, image, tlsOptions, registryAuthGetter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageExists", reflect.TypeOf((*MockRegistry)(nil).ImageExists), ctx, image, tlsOptions, registryAuthGetter)
}

// VerifyModuleExists mocks base method.
func (m *MockRegistry) VerifyModuleExists(layer v1.Layer, pathPrefix, kernelVersion, moduleFileName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyModuleExists", layer, pathPrefix, kernelVersion, moduleFileName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifyModuleExists indicates an expected call of VerifyModuleExists.
func (mr *MockRegistryMockRecorder) VerifyModuleExists(layer, pathPrefix, kernelVersion, moduleFileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyModuleExists", reflect.TypeOf((*MockRegistry)(nil).VerifyModuleExists), layer, pathPrefix, kernelVersion, moduleFileName)
}
