// Code generated by MockGen. DO NOT EDIT.
// Source: nodemodulesconfig_reconciler.go

// Package controllers is a generated GoMock package.
package controllers

import (
	context "context"
	reflect "reflect"

	v1beta1 "github.com/kubernetes-sigs/kernel-module-management/api/v1beta1"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockWorkerHelper is a mock of WorkerHelper interface.
type MockWorkerHelper struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerHelperMockRecorder
}

// MockWorkerHelperMockRecorder is the mock recorder for MockWorkerHelper.
type MockWorkerHelperMockRecorder struct {
	mock *MockWorkerHelper
}

// NewMockWorkerHelper creates a new mock instance.
func NewMockWorkerHelper(ctrl *gomock.Controller) *MockWorkerHelper {
	mock := &MockWorkerHelper{ctrl: ctrl}
	mock.recorder = &MockWorkerHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerHelper) EXPECT() *MockWorkerHelperMockRecorder {
	return m.recorder
}

// ProcessModuleSpec mocks base method.
func (m *MockWorkerHelper) ProcessModuleSpec(ctx context.Context, nmc *v1beta1.NodeModulesConfig, spec *v1beta1.NodeModuleSpec, status *v1beta1.NodeModuleStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessModuleSpec", ctx, nmc, spec, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessModuleSpec indicates an expected call of ProcessModuleSpec.
func (mr *MockWorkerHelperMockRecorder) ProcessModuleSpec(ctx, nmc, spec, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessModuleSpec", reflect.TypeOf((*MockWorkerHelper)(nil).ProcessModuleSpec), ctx, nmc, spec, status)
}

// ProcessOrphanModuleStatus mocks base method.
func (m *MockWorkerHelper) ProcessOrphanModuleStatus(ctx context.Context, nmc *v1beta1.NodeModulesConfig, status *v1beta1.NodeModuleStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessOrphanModuleStatus", ctx, nmc, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessOrphanModuleStatus indicates an expected call of ProcessOrphanModuleStatus.
func (mr *MockWorkerHelperMockRecorder) ProcessOrphanModuleStatus(ctx, nmc, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessOrphanModuleStatus", reflect.TypeOf((*MockWorkerHelper)(nil).ProcessOrphanModuleStatus), ctx, nmc, status)
}

// RemoveOrphanFinalizers mocks base method.
func (m *MockWorkerHelper) RemoveOrphanFinalizers(ctx context.Context, nodeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOrphanFinalizers", ctx, nodeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOrphanFinalizers indicates an expected call of RemoveOrphanFinalizers.
func (mr *MockWorkerHelperMockRecorder) RemoveOrphanFinalizers(ctx, nodeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOrphanFinalizers", reflect.TypeOf((*MockWorkerHelper)(nil).RemoveOrphanFinalizers), ctx, nodeName)
}

// SyncStatus mocks base method.
func (m *MockWorkerHelper) SyncStatus(ctx context.Context, nmc *v1beta1.NodeModulesConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncStatus", ctx, nmc)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncStatus indicates an expected call of SyncStatus.
func (mr *MockWorkerHelperMockRecorder) SyncStatus(ctx, nmc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncStatus", reflect.TypeOf((*MockWorkerHelper)(nil).SyncStatus), ctx, nmc)
}

// MockPodManager is a mock of PodManager interface.
type MockPodManager struct {
	ctrl     *gomock.Controller
	recorder *MockPodManagerMockRecorder
}

// MockPodManagerMockRecorder is the mock recorder for MockPodManager.
type MockPodManagerMockRecorder struct {
	mock *MockPodManager
}

// NewMockPodManager creates a new mock instance.
func NewMockPodManager(ctrl *gomock.Controller) *MockPodManager {
	mock := &MockPodManager{ctrl: ctrl}
	mock.recorder = &MockPodManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodManager) EXPECT() *MockPodManagerMockRecorder {
	return m.recorder
}

// CreateLoaderPod mocks base method.
func (m *MockPodManager) CreateLoaderPod(ctx context.Context, nmc client.Object, nms *v1beta1.NodeModuleSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoaderPod", ctx, nmc, nms)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLoaderPod indicates an expected call of CreateLoaderPod.
func (mr *MockPodManagerMockRecorder) CreateLoaderPod(ctx, nmc, nms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoaderPod", reflect.TypeOf((*MockPodManager)(nil).CreateLoaderPod), ctx, nmc, nms)
}

// CreateUnloaderPod mocks base method.
func (m *MockPodManager) CreateUnloaderPod(ctx context.Context, nmc client.Object, nms *v1beta1.NodeModuleStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUnloaderPod", ctx, nmc, nms)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUnloaderPod indicates an expected call of CreateUnloaderPod.
func (mr *MockPodManagerMockRecorder) CreateUnloaderPod(ctx, nmc, nms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUnloaderPod", reflect.TypeOf((*MockPodManager)(nil).CreateUnloaderPod), ctx, nmc, nms)
}

// DeletePod mocks base method.
func (m *MockPodManager) DeletePod(ctx context.Context, pod *v1.Pod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePod", ctx, pod)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePod indicates an expected call of DeletePod.
func (mr *MockPodManagerMockRecorder) DeletePod(ctx, pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePod", reflect.TypeOf((*MockPodManager)(nil).DeletePod), ctx, pod)
}

// ListWorkerPodsOnNode mocks base method.
func (m *MockPodManager) ListWorkerPodsOnNode(ctx context.Context, nodeName string) ([]v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkerPodsOnNode", ctx, nodeName)
	ret0, _ := ret[0].([]v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkerPodsOnNode indicates an expected call of ListWorkerPodsOnNode.
func (mr *MockPodManagerMockRecorder) ListWorkerPodsOnNode(ctx, nodeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkerPodsOnNode", reflect.TypeOf((*MockPodManager)(nil).ListWorkerPodsOnNode), ctx, nodeName)
}
