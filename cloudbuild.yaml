steps:
  - id: build-manager-image
    name: gcr.io/cloud-builders/docker
    args:
    - build
    - --build-arg
    - TARGET=manager
    - --tag=gcr.io/$PROJECT_ID/kernel-module-management-operator:$_GIT_TAG
    - --tag=gcr.io/$PROJECT_ID/kernel-module-management-operator:latest
    - .
    waitFor: ['-']
  - id: push-manager-image
    name: gcr.io/cloud-builders/docker
    args:
      - push
      - --all-tags
      - gcr.io/$PROJECT_ID/kernel-module-management-operator
    waitFor: [build-manager-image]
  - id: build-manager-hub-image
    name: gcr.io/cloud-builders/docker
    args:
    - build
    - --build-arg
    - TARGET=manager-hub
    - --tag=gcr.io/$PROJECT_ID/kernel-module-management-operator-hub:$_GIT_TAG
    - --tag=gcr.io/$PROJECT_ID/kernel-module-management-operator-hub:latest
    - .
    waitFor: ['-']
  - id: push-manager-hub-image
    name: gcr.io/cloud-builders/docker
    args:
      - push
      - --all-tags
      - gcr.io/$PROJECT_ID/kernel-module-management-operator-hub
    waitFor: [build-manager-hub-image]
  - id: build-signimage
    name: gcr.io/cloud-builders/docker
    args:
      - build
      - --tag=gcr.io/$PROJECT_ID/kernel-module-management-signimage:$_GIT_TAG
      - --tag=gcr.io/$PROJECT_ID/kernel-module-management-signimage:latest
      - --file=Dockerfile.signimage
      - .
    waitFor: ['-']
  - id: push-signimage
    name: gcr.io/cloud-builders/docker
    args:
      - push
      - --all-tags
      - gcr.io/$PROJECT_ID/kernel-module-management-signimage
    waitFor: [build-signimage]
  - id: build-webhook-server
    name: gcr.io/cloud-builders/docker
    args:
      - build
      - --tag=gcr.io/$PROJECT_ID/kernel-module-management-webhook-server:$_GIT_TAG
      - --tag=gcr.io/$PROJECT_ID/kernel-module-management-webhook-server:latest
      - --file=Dockerfile.webhook
      - .
    waitFor: ['-']
  - id: push-webhook-server
    name: gcr.io/cloud-builders/docker
    args:
      - push
      - --all-tags
      - gcr.io/$PROJECT_ID/kernel-module-management-webhook-server
    waitFor: [build-webhook-server]
  - id: build-worker
    name: gcr.io/cloud-builders/docker
    args:
      - build
      - --tag=gcr.io/$PROJECT_ID/kernel-module-management-worker:$_GIT_TAG
      - --tag=gcr.io/$PROJECT_ID/kernel-module-management-worker:latest
      - --file=Dockerfile.worker
      - .
    waitFor: ['-']
  - id: push-worker
    name: gcr.io/cloud-builders/docker
    args:
      - push
      - --all-tags
      - gcr.io/$PROJECT_ID/kernel-module-management-worker
    waitFor: [build-worker]
  - id: build-bundles
    name: golang:1.23-alpine3.21
    env:
      - '_GIT_TAG=$_GIT_TAG'
    entrypoint: sh
    args:
      - -eEuo
      - pipefail
      - -c
      - |-
        set -euxo pipefail
        apk add bash curl gcc make musl-dev

        # Install kubectl
        curl -Lo /usr/local/bin/kubectl "https://dl.k8s.io/release/$$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x /usr/local/bin/kubectl

        # Include the destination directory of `go install` in $$PATH
        export PATH=$$(go env GOPATH)/bin:$${PATH}

        # KMM
        make bundle IMAGE_TAG=$_GIT_TAG USE_IMAGE_DIGESTS=true
        mv bundle bundle.Dockerfile /bundle-kmm

        # KMM Hub
        make bundle-hub IMAGE_TAG=$_GIT_TAG USE_IMAGE_DIGESTS=true
        mv bundle bundle.Dockerfile /bundle-hub
    volumes:
      - name: bundle-kmm
        path: /bundle-kmm
      - name: bundle-hub
        path: /bundle-hub
    waitFor: [push-manager-image, push-manager-hub-image, push-signimage, push-webhook-server, push-worker]
  - id: build-kmm-bundle-image
    name: gcr.io/cloud-builders/docker
    args:
      - build
      - --file=bundle.Dockerfile
      - --cache-from=gcr.io/$PROJECT_ID/kernel-module-management-operator-bundle:latest
      - --tag=gcr.io/$PROJECT_ID/kernel-module-management-operator-bundle:$_GIT_TAG
      - --tag=gcr.io/$PROJECT_ID/kernel-module-management-operator-bundle:latest
      - .
    dir: /bundle-kmm
    volumes:
      - name: bundle-kmm
        path: /bundle-kmm
    waitFor: [build-bundles]
  - id: build-hub-bundle-image
    name: gcr.io/cloud-builders/docker
    args:
      - build
      - --file=bundle.Dockerfile
      - --cache-from=gcr.io/$PROJECT_ID/kernel-module-management-operator-hub-bundle:latest
      - --tag=gcr.io/$PROJECT_ID/kernel-module-management-operator-hub-bundle:$_GIT_TAG
      - --tag=gcr.io/$PROJECT_ID/kernel-module-management-operator-hub-bundle:latest
      - .
    dir: /bundle-hub
    volumes:
      - name: bundle-hub
        path: /bundle-hub
    waitFor: [build-bundles]
# this prevents errors if you don't use both _GIT_TAG and _PULL_BASE_REF,
# or any new substitutions added in the future.
options:
  substitution_option: ALLOW_LOOSE
images:
  # Binary images pushed manually in steps so that they are available in build-bundles,
  # which looks for their SHA on their registry.
  - gcr.io/$PROJECT_ID/kernel-module-management-operator-bundle:$_GIT_TAG
  - gcr.io/$PROJECT_ID/kernel-module-management-operator-bundle:latest
  - gcr.io/$PROJECT_ID/kernel-module-management-operator-hub-bundle:$_GIT_TAG
  - gcr.io/$PROJECT_ID/kernel-module-management-operator-hub-bundle:latest
